<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言实现小根堆</title>
    <url>/C-Min-Heap/</url>
    <content><![CDATA[<p>数据结构有 <strong>堆排序</strong> ，但 <strong>堆排序</strong> 在众多排序算法中的能力并不突出，这是因为排序并不体现 <strong>堆</strong> 的优势，而只能算是它附带的能力。</p>
<p><strong>堆</strong> 的优势在于当从 <strong>堆</strong> 中弹出最小值（针对 <strong>小根堆</strong> 而言）时，或将某个数值放入 <strong>堆</strong> 中时，相比其他数据结构，它需要检索和调整其他数据元素的操作最少，效率最优，所以它更适合用来实现 <strong>优先队列</strong>，因为 <strong>优先队列</strong> 每次只会获取队列中优先级最高的数据元素，而不会操作其他数据元素，这和 <strong>小跟堆</strong> 每次只能弹出最小值而不能弹出其他值的行为一致。因此如 <strong>Dijkstra</strong> 算法在面临规模上万的顶点个数的时候，其内部权值检索环节采用 <strong>优先队列</strong> 实现的话能显著提升算法效率。除 <strong>Dijkstra</strong> 算法外，还有像 <strong>Huffman</strong> 树的构建过程中，需要频繁从当前森林中获取根节点权值最小的树，直到森林中只剩一棵树为止，这个过程若采用 <strong>优先队列</strong> 也能显著改善性能，总之， <strong>优先队列</strong> 在各类算法中的应用非常广泛。</p>
<p>堆通过两个关键性操作 <em>shift up</em>（上浮）和 <em>shift down</em> （下沉）维护堆内数据，<em>shift up</em> 用于往堆中插入新的数据元素，<em>shift down</em> 用于从堆中弹出数据元素。</p>
<p>以下是我用C语言实现的 <strong>小根堆</strong> 的完整代码，以供参考。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">* Min-Heap</span></span><br><span class="line"><span class="comment">* Copyright (C) i@foxzzz.com</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* C implementation of the Min-Heap.</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">/*for visual studio*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 堆结构体</span></span><br><span class="line"><span class="comment">* @data 数据元素</span></span><br><span class="line"><span class="comment">* @capacity 数组容量</span></span><br><span class="line"><span class="comment">* @len 元素数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tHeap</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>* data;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">&#125; Heap, * pHeap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 创建堆结构体</span></span><br><span class="line"><span class="comment">* @param[in] capacity 指定数组容量</span></span><br><span class="line"><span class="comment">* @return 空指针失败 其他成功</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">pHeap <span class="title">createHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    pHeap heap = (pHeap)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Heap));</span><br><span class="line">    assert(heap);</span><br><span class="line">    assert(capacity &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(heap, <span class="number">0</span>, <span class="keyword">sizeof</span>(Heap));</span><br><span class="line">    heap-&gt;capacity = capacity;</span><br><span class="line">    heap-&gt;data = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(heap-&gt;data[<span class="number">0</span>]) * heap-&gt;capacity);</span><br><span class="line">    assert(heap-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> heap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 销毁堆结构体</span></span><br><span class="line"><span class="comment">* @param[in] heap 需要销毁的结构体指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyHeap</span><span class="params">(pHeap heap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (heap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap-&gt;data) &#123;</span><br><span class="line">            <span class="built_in">free</span>(heap-&gt;data);</span><br><span class="line">            heap-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(heap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 元素上浮</span></span><br><span class="line"><span class="comment">* @param[in] heap 需要操作的堆结构指针</span></span><br><span class="line"><span class="comment">* @param[in] position 指定要上移的元素</span></span><br><span class="line"><span class="comment">*  - position 是元素编号，所以对应到数组元素时候需要 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(pHeap heap, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (position &gt;&gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> parent = position &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*与父元素进行比较，如果大于父元素则进行交换*/</span></span><br><span class="line">        <span class="keyword">if</span> (heap-&gt;data[parent - <span class="number">1</span>] &gt; heap-&gt;data[position - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = heap-&gt;data[parent - <span class="number">1</span>];</span><br><span class="line">            heap-&gt;data[parent - <span class="number">1</span>] = heap-&gt;data[position - <span class="number">1</span>];</span><br><span class="line">            heap-&gt;data[position - <span class="number">1</span>] = temp;</span><br><span class="line">            position = parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 元素下沉</span></span><br><span class="line"><span class="comment">* @param[in] heap 需要操作的堆结构指针</span></span><br><span class="line"><span class="comment">* @param[in] position 指定要下沉的元素</span></span><br><span class="line"><span class="comment">*  - position 是元素编号，所以对应到数组元素时候需要 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(pHeap heap, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (position &lt;&lt; <span class="number">1</span> &lt;= heap-&gt;len) &#123;</span><br><span class="line">        <span class="keyword">int</span> target = position &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*指定左右孩子中的较小者*/</span></span><br><span class="line">        <span class="keyword">if</span> (target + <span class="number">1</span> &lt;= heap-&gt;len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heap-&gt;data[target] &lt; heap-&gt;data[target - <span class="number">1</span>]) &#123;</span><br><span class="line">                target += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*父节点大于较小者则交换*/</span></span><br><span class="line">        <span class="keyword">if</span> (heap-&gt;data[position - <span class="number">1</span>] &gt; heap-&gt;data[target - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = heap-&gt;data[target - <span class="number">1</span>];</span><br><span class="line">            heap-&gt;data[target - <span class="number">1</span>] = heap-&gt;data[position - <span class="number">1</span>];</span><br><span class="line">            heap-&gt;data[position - <span class="number">1</span>] = temp;</span><br><span class="line">            position = target;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 插入元素</span></span><br><span class="line"><span class="comment">* @param[in] heap 需要操作的堆结构指针</span></span><br><span class="line"><span class="comment">* @param[in] v 需要插入的元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertHeap</span><span class="params">(pHeap heap, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*容量满了按1倍扩容*/</span></span><br><span class="line">    <span class="keyword">if</span> (heap-&gt;capacity == heap-&gt;len) &#123;</span><br><span class="line">        heap-&gt;capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        heap-&gt;data = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(heap-&gt;data, heap-&gt;capacity);</span><br><span class="line">        assert(heap-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*插入到堆尾*/</span></span><br><span class="line">    heap-&gt;data[heap-&gt;len++] = v;</span><br><span class="line">    <span class="comment">/*调整堆结构，对堆尾元素进行上浮*/</span></span><br><span class="line">    shiftUp(heap, heap-&gt;len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 返回对顶元素，此操作要求堆不为空</span></span><br><span class="line"><span class="comment">* @param[in] heap 需要操作的堆结构指针</span></span><br><span class="line"><span class="comment">* @return 返回对顶元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">topHeap</span><span class="params">(pHeap heap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> heap-&gt;data[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief 弹出对顶元素</span></span><br><span class="line"><span class="comment">* @param[in] heap 需要操作的堆结构指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">popHeap</span><span class="params">(pHeap heap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (heap-&gt;len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*将堆尾元素放入堆顶*/</span></span><br><span class="line">        heap-&gt;data[<span class="number">0</span>] = heap-&gt;data[heap-&gt;len - <span class="number">1</span>];</span><br><span class="line">        --heap-&gt;len;</span><br><span class="line">        <span class="comment">/*调整堆结构，对新的堆顶元素进行下沉*/</span></span><br><span class="line">        shiftDown(heap, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*create heap*/</span></span><br><span class="line">    pHeap heap = createHeap(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*insert value*/</span></span><br><span class="line">    insertHeap(heap, <span class="number">3</span>);</span><br><span class="line">    insertHeap(heap, <span class="number">1</span>);</span><br><span class="line">    insertHeap(heap, <span class="number">4</span>);</span><br><span class="line">    insertHeap(heap, <span class="number">7</span>);</span><br><span class="line">    insertHeap(heap, <span class="number">6</span>);</span><br><span class="line">    insertHeap(heap, <span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*pop value &amp; print*/</span></span><br><span class="line">    <span class="keyword">while</span> (heap-&gt;len) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = topHeap(heap);</span><br><span class="line">        popHeap(heap);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*destroy heap*/</span></span><br><span class="line">    destroyHeap(heap);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>QT连接MySQL遇到的坑</title>
    <url>/QT-to-MySQL/</url>
    <content><![CDATA[<p><strong>QT</strong> 连接 <strong>MySQL</strong> 的坑不少，记录自己的踩坑经历以备后查。</p>
<h2 id="驱动文件"><a href="#驱动文件" class="headerlink" title="驱动文件"></a>驱动文件</h2><p>驱动是指 <code>QSqlDatabase::drivers()</code> 输出的列表项，以下是输出项与对应驱动文件所在位置：</p>
<blockquote>
<p>Qt/Qt5.12.10/5.12.10/mingw73_64/plugins/sqldrivers/*.dll</p>
</blockquote>
<p>这里的5.12.10是我安装的 <strong>QT</strong> 版本，<strong>mingw73</strong> 是我安装的 <strong>mingw</strong> 版本，64是采用64位编译，每个人的配置会有所不同，可根据给出的模式检查对应 <strong>QT</strong> 目录是否存在以下两个dll：</p>
<blockquote>
<p>qsqlmysql.dll<br>qsqlmysqld.dll</p>
</blockquote>
<p>如果缺少，那么 <code>QSqlDatabase::drivers()</code> 输出项将不会出现 <em>‘QMYSQL’</em> ，这是造成无法连接的原因之一，这时候我们就需要自己编译这两个文件，如何编译后面再说。</p>
<h2 id="客户端动态库"><a href="#客户端动态库" class="headerlink" title="客户端动态库"></a>客户端动态库</h2><p>如果驱动文件存在，但是无法连接 <strong>MySQL</strong> ，那就是缺少 <strong>MySQL</strong> 的客户端动态库，找到 <strong>MySQL</strong> 的安装目录所对应的 <em>libmysql.dll</em> 文件：</p>
<blockquote>
<p>mysql-8.0.21-winx64/lib/libmysql.dll</p>
</blockquote>
<p>这里的8.0.21是我的 <strong>MySQL</strong> 版本，winx64是64位环境，可与之对照，将 <em>libmysql.dll</em> 复制到：</p>
<blockquote>
<p>Qt/Qt5.12.10/5.12.10/mingw73_64/bin/</p>
</blockquote>
<p>目录下，注意一点，x86的客户端动态库要放在对应的x86目录，x64的客户端动态库要放在对应的x64目录，别放错了。</p>
<p>重新编译执行对应版本的 <strong>QT</strong> 程序，如果能成功连接 <strong>MySQL</strong> ，那么问题解决，如果不行，说明 <em>驱动文件</em> 和 <em>客户端动态库</em> 版本不兼容，需要自己重新编译驱动文件（这里的原因多半是 <strong>MySQL</strong> 的客户端动态库是8.x.xx版本而QT中的驱动文件是针对 <strong>MySQL</strong> 的5.x.xx版本编译的）。如果不想亲自编译驱动文件，也有快速解决方法，就是下载低版本的 <strong>MySQL</strong>，从中找出 <em>libmysql.dll</em> 替换。需要说明一点， <strong>MySQL</strong> 客户端动态库需要与 <strong>QT</strong> 中的x86/x64对应，但是无须跟安装的 <strong>MySQL</strong> 服务端对应，换言之，x86的客户端动态库是可以连接x64的 <strong>MySQL</strong> 服务端的。</p>
<h2 id="编译驱动"><a href="#编译驱动" class="headerlink" title="编译驱动"></a>编译驱动</h2><p>这里是坑最多的地方，<strong>QT</strong> 有些版本是自带 <strong>MySQL</strong> 驱动文件的，但有些版本却又不带，原因可能是 <strong>MySQL</strong> 版本更新导致客户端动态库变化， <strong>QT</strong> 预制的编译好的版本太老无法兼容新的 <strong>MySQL</strong> 版本，所以干脆把这件事留给工程师自己做。</p>
<p>找到如下工程：</p>
<blockquote>
<p>Qt/Qt5.12.10/5.12.10/Src/qtbase/src/plugins/sqldrivers/mysql/mysql.pro</p>
</blockquote>
<p>启动 <em>Qt Creator</em>，将 <em>mysql.pro</em> 中的这行语句注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># QMAKE_USE += mysql</span><br></pre></td></tr></table></figure>

<p>加入两行新语句，注意一点，以下的 <em>C:/mysql-8.0.16-winx64/</em> 是我机器的 <em>MySQL</em> 安装路径，需要换成你自己的，另外，如果路径中含有空格，需要将路径首尾加上双引号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INCLUDEPATH += C:/mysql-8.0.16-winx64/include/</span><br><span class="line">LIBS += C:mysql-8.0.16-winx64/lib/libmysql.lib</span><br></pre></td></tr></table></figure>

<p>有人说要再加上 <em>DESTDIR</em> 去指定编译的驱动文件生成位置，这个我测试没有效果，不加的话会自动生成到QT安装目录的磁盘根目录下，比如我的 <strong>QT</strong> 安装在C盘，那么就是生成在：</p>
<blockquote>
<p>C:/plugins/sqldrivers/</p>
</blockquote>
<p>在QT中只需要执行 <strong>编译</strong> 操作而不需要执行 <strong>编译运行</strong> 操作，因为它编译的是dll，不是可执行文件，如果 <strong>编译运行</strong> 将出现找不到执行文件的错误提示。</p>
<p>编译过程中可能出现找不到 <em>qtsqldrivers-config.pri</em> 的错误提示，这时候可以找一找 </p>
<blockquote>
<p>Qt/Qt5.12.10/5.12.10/Src/qtbase/src/plugins/sqldrivers/qsqldriverbase.pri</p>
</blockquote>
<p>所在的同级目录是否有一个 <em>configure.pri</em>文件存在，如果存在，则打开 <em>qsqldriverbase.pri</em> 作以下修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># include($$shadowed($$PWD)/qtsqldrivers-config.pri)</span><br><span class="line">include(./configure.pri)</span><br></pre></td></tr></table></figure>

<p>也就是注释第一句，添加第二句。操作成功会在目录</p>
<blockquote>
<p>C:/plugins/sqldrivers/</p>
</blockquote>
<p>生成以下两个dll</p>
<blockquote>
<p>qsqlmysql.dll<br>qsqlmysqld.dll</p>
</blockquote>
<p>将之拷贝到以下目录即可：</p>
<blockquote>
<p><strong>Qt/Qt5.12.10/5.12.10/mingw73_64/plugins/sqldrivers/</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>QT</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中delete和delete[]的深层区别</title>
    <url>/cpp-array-delete/</url>
    <content><![CDATA[<p>今天又看到群里有人讨论 <strong>C++</strong> 中 <code>delete</code> 和 <code>delete[]</code> 的区别，表层原因大家都了解，因为教科书上说得很明白：<code>new</code> 和 <code>delete</code> 需配对使用， <code>new[]</code> 和 <code>delete[]</code> 需配对使用。</p>
<p>但若问起在什么情况下针对 <code>new[]</code> 申请的资源可以使用 <code>delete</code> 释放而不会有任何问题，能讲清楚这点的人就很少了。因为这涉及到对 <code>new</code> 、 <code>delete</code> 、 <code>new[]</code> 、 <code>delete[]</code> 内部实现机制的理解。</p>
<p>根本原因在于， <code>delete</code> 需要调用内存中一个元素的析构函数，而 <code>delete[]</code> 需要调用内存中若干个元素的析构函数，这里就牵涉出一个问题—— <code>delete[]</code> 是如何知道内存中元素的数量的？我们知道 <code>delete[]</code> 中的 <code>[]</code> 并不会传入参数，所以这个数量不会是 <code>delete[]</code> 传过来的，而是在 <code>new[]</code> 的时候保存的，只有这样才得以在 <code>delete[]</code> 的时候依据元素数量逐个调用析构函数。</p>
<p>接下来说 <code>new[]</code> 如何存储这个数量，首先它会动态申请一段内存，然后在这段内存的首地址空间中存入元素数量，在这个空间之后的内存分配给各元素，<code>new[]</code> 的返回值并不是这段动态内存空间的首地址，而是动态内存空间中存放第一个元素的内存地址。</p>
<p>以上说的是 <code>delete[]</code> 需要调用元素析构函数的情况，但是C++的哲学是 <strong>Zero-cost Abstraction</strong>，所以对于并没有显式定义析构函数的 <code>struct/class</code> 的对象元素来说，并不需要为其产生析构函数的代码，也就不需要在 <code>delete[]</code> 的时候调用元素的析构函数以增加无谓的运算开销，那么， <code>new[]</code> 也就不用存储这个元素数量。还有一种情况就是如 <code>int</code> 等基本类型作为空间元素的时候，也不存在析构函数的调用，所以跟没有显示定义析构函数的对象元素一样：在 <code>new[]</code> 时候不需要存储元素数量，在 <code>delete[]</code> 时候不需要调用析构函数。</p>
<p>综上所述， <code>new[]</code> 和 <code>delete[]</code> 的具体行为受对象元素是否存在必须调用析构函数而有所不同。</p>
<p>一图胜千言，我画了三张图来展现上面说的三种元素情况：</p>
<ul>
<li><code>int</code> 作为基本类型：</li>
</ul>
<p><img src="/cpp-array-delete/1.png" alt="int *ptr = new int[5]"></p>
<ul>
<li>定义了一个 <code>class A</code> ，但是 <code>A</code> 并没有显式定义析构函数：</li>
</ul>
<p><img src="/cpp-array-delete/2.png" alt="A *ptr = new A[5]"></p>
<ul>
<li>定义了一个 <code>class B</code>，并且 <code>B</code> 显式定义了析构函数：</li>
</ul>
<p><img src="/cpp-array-delete/3.png" alt="B *ptr = new B[5]"></p>
<p>可以看出，对于 <code>int *ptr = new int[5]</code> 和 <code>A *ptr = new A[5]</code> ，因为不涉及存储元素数量和对析构函数的调用，所以 <code>delete</code> 和 <code>delete[]</code> 的操作都仅仅是将传入的地址进行释放而不做其他额外事情。这种情况下，你使用 <code>delete</code> 或者 <code>delete[]</code> 都不会存在任何问题。</p>
<p>但是对于 <code>B *ptr = new B[5]</code> 却一定要使用 <code>delete[]</code> ，因为传过来的并不是真正的动态内存首地址， <code>delete[]</code> 的内部处理就会变成从传入的内存地址往前偏移获取真正的动态内存首地址，从该首地址空间获取到元素的数量，然后通过数量逐个调用元素的析构函数，完了再用得到的内存首地址释放动态内存。但若使用 <code>delete</code> 就会只调用第一个元素的析构函数，并且将第一个元素的地址作为动态内存首地址进行释放，但是释放错误的内存地址（非申请时候动态内存的首地址）将发生严重错误，如在 <strong>visual studio</strong> 中会直接触发程序异常并崩溃。</p>
<p>接下来思考另一种情况，如果 <code>B *ptr = new B</code> 操作后使用 <code>delete[]</code> 释放呢？这也会产生非常严重的错误，因为它会根据这个内存地址往前偏移获取数量，但是这个数量值是个不确定的值，所以接下来发生的行为就是在指针越界访问的情况下调用了无数次析构函数，而这些内存空间中并不存在有效元素，该行为将发生程序崩溃，即便该过程程序照常执行，接下来用偏移地址释放内存也会崩溃，总之，程序执行到此已经走火入魔了。 </p>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>delete</tag>
        <tag>delete[]</tag>
      </tags>
  </entry>
  <entry>
    <title>pthread 实现线程同步功能的 Queue</title>
    <url>/queue-with-thread-synchronization/</url>
    <content><![CDATA[<p>这几天需要使用 <strong>pthread</strong> 实现了一个线程同步功能的 <strong>Queue</strong>，过程中踩了两个坑：</p>
<ul>
<li><p><strong>pthread_cond_wait()</strong> 需要放在 <strong>pthread_mutex_lock()</strong> 和 <strong>pthread_mutex_unlock()</strong> 之中，而不是之外，否则将发生死锁，这里的概念有点绕，需要理解 <strong>pthread_cond_wait()</strong> 是会释放当前的 <em>lock</em>，以便其他线程进入临界区，当其他线程 <strong>pthread_cond_signal()</strong> 的时候，<em>wait</em> 线程被唤醒，又重新获得锁；</p>
</li>
<li><p><strong>pthread_cond_wait()</strong> 唤醒后需要再次条件判断，并且条件判断形式必须是 <strong>while</strong> 而不能是 <strong>if</strong>，之所以必须这样做的原因是<strong>pthread_cond_signal()</strong> 可能唤醒多个正处于 <em>wait</em> 状态的线程（多cpu情况），所以被唤醒的线程需要再次检测是否真有数据需要处理，如不需要处理应当继续进入 <em>wait</em> 以等待下次唤醒。</p>
</li>
</ul>
<p>我将 <strong>Queue</strong> 实现成可支持一对一、一对多、多对一、多对多的线程同步机制，并写了一个简单的生产者消费者模型用以测试。完整程序如下，测试环境是 <em>ubuntu 20.04</em>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">* Queue with thread synchronization</span></span><br><span class="line"><span class="comment">* Copyright (C) i@foxzzz.com</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Using pthread implementation.</span></span><br><span class="line"><span class="comment">* Can be used in the producer-consumer model</span></span><br><span class="line"><span class="comment">* of one-to-one, one-to-many, many-to-one,</span></span><br><span class="line"><span class="comment">* many-to-many patterns.</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief queue with thread synchronization</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="keyword">int</span> capacity) :</span><br><span class="line">        <span class="built_in">front_</span>(<span class="number">0</span>),</span><br><span class="line">        <span class="built_in">back_</span>(<span class="number">0</span>),</span><br><span class="line">        <span class="built_in">size_</span>(<span class="number">0</span>),</span><br><span class="line">        <span class="built_in">capacity_</span>(capacity),</span><br><span class="line">        <span class="built_in">cond_send_</span>(PTHREAD_COND_INITIALIZER),</span><br><span class="line">        <span class="built_in">cond_receive_</span>(PTHREAD_COND_INITIALIZER),</span><br><span class="line">        <span class="built_in">mutex_</span>(PTHREAD_MUTEX_INITIALIZER) &#123;</span><br><span class="line">        arr_ = <span class="keyword">new</span> T[capacity_];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Queue</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] arr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">    * @brief data entry queue</span></span><br><span class="line"><span class="comment">    * @param[in] data needs to be put into the queue</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">const</span> T&amp; data)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;mutex_);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">full</span>()) &#123;</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;cond_receive_, &amp;mutex_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">enqueue</span>(data);</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex_);</span><br><span class="line">        <span class="built_in">pthread_cond_signal</span>(&amp;cond_send_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">    * @brief retrieve data from the queue</span></span><br><span class="line"><span class="comment">    * @param[out] data retrieved from the queue</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(T&amp; data)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;mutex_);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;cond_send_, &amp;mutex_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dequeue</span>(data);</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex_);</span><br><span class="line">        <span class="built_in">pthread_cond_signal</span>(&amp;cond_receive_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">const</span> T&amp; data)</span> </span>&#123;</span><br><span class="line">        arr_[back_] = data;</span><br><span class="line">        back_ = (back_ + <span class="number">1</span>) % capacity_;</span><br><span class="line">        ++size_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dequeue</span><span class="params">(T&amp; data)</span> </span>&#123;</span><br><span class="line">        data = arr_[front_];</span><br><span class="line">        front_ = (front_ + <span class="number">1</span>) % capacity_;</span><br><span class="line">        --size_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">full</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (size_ == capacity_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (size_ == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* arr_;</span><br><span class="line">    <span class="keyword">int</span> front_;</span><br><span class="line">    <span class="keyword">int</span> back_;</span><br><span class="line">    <span class="keyword">int</span> size_;</span><br><span class="line">    <span class="keyword">int</span> capacity_;</span><br><span class="line">    <span class="keyword">pthread_cond_t</span> cond_send_;</span><br><span class="line">    <span class="keyword">pthread_cond_t</span> cond_receive_;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> mutex_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief a demonstration of queue operations</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Make&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Demo</span>(<span class="keyword">int</span> capacity) :</span><br><span class="line">        <span class="built_in">queue_</span>(capacity) &#123;</span><br><span class="line">        <span class="built_in">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">    * @brief generate the data and queue it(for producer thread)</span></span><br><span class="line"><span class="comment">    * @param[in] origin The starting value of the data</span></span><br><span class="line"><span class="comment">    * @param[in] count The amount of data to be generated</span></span><br><span class="line"><span class="comment">    * @param[in] interval the time interval(ms) to enter the queue</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> origin, <span class="keyword">int</span> count, <span class="keyword">int</span> interval)</span> </span>&#123;</span><br><span class="line">        Make make;</span><br><span class="line">        <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">            T data = <span class="built_in">make</span>(origin);</span><br><span class="line">            queue_.<span class="built_in">send</span>(data);</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;send&quot;</span>, data);</span><br><span class="line">            <span class="built_in">usleep</span>(interval * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">    * @brief retrieve data from the queue(for consumer thread)</span></span><br><span class="line"><span class="comment">    * @param[in] interval the time interval(ms) to enter the queue</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">int</span> interval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            T data;</span><br><span class="line">            queue_.<span class="built_in">receive</span>(data);</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;receive&quot;</span>, data);</span><br><span class="line">            <span class="built_in">usleep</span>(interval * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> T&amp; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(buffer, <span class="string">&quot;[%-4lu ms][pid %lu][%-10s] &quot;</span>, <span class="built_in">elapsedMS</span>(), <span class="built_in">pthread_self</span>(), name);</span><br><span class="line">        std::stringstream ss;</span><br><span class="line">        ss &lt;&lt; buffer;</span><br><span class="line">        ss &lt;&lt; data;</span><br><span class="line">        ss &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; ss.<span class="built_in">str</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">gettimeofday</span>(&amp;start_time_, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">elapsedMS</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">current</span>;</span></span><br><span class="line">        <span class="built_in">gettimeofday</span>(&amp;current, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">diffMS</span>(start_time_, current);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">diffMS</span><span class="params">(<span class="keyword">const</span> timeval&amp; start, <span class="keyword">const</span> timeval&amp; end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> seconds = end.tv_sec - start.tv_sec;</span><br><span class="line">        <span class="keyword">long</span> useconds = end.tv_usec - start.tv_usec;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>)(((<span class="keyword">double</span>)(seconds) * <span class="number">1000</span> + (<span class="keyword">double</span>)(useconds) / <span class="number">1000.0</span>) + <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    timeval start_time_;</span><br><span class="line">    Queue&lt;T&gt; queue_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief generates integer data</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntMake</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">IntMake</span>() : <span class="built_in">count_</span>(<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> origin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (origin + count_++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief thread type</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    TYPE_THREAD_SEND,</span><br><span class="line">    TYPE_THREAD_RECEIVE</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief thread arguments</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Args</span> &#123;</span></span><br><span class="line">    <span class="built_in">Args</span>(Demo&lt;<span class="keyword">int</span>, IntMake&gt;&amp; demo, <span class="keyword">int</span> type, <span class="keyword">int</span> interval) :</span><br><span class="line">        <span class="built_in">demo</span>(demo),</span><br><span class="line">        <span class="built_in">type</span>(type),</span><br><span class="line">        <span class="built_in">interval</span>(interval),</span><br><span class="line">        <span class="built_in">origin</span>(<span class="number">0</span>),</span><br><span class="line">        <span class="built_in">count</span>(<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Args</span>(Demo&lt;<span class="keyword">int</span>, IntMake&gt;&amp; demo, <span class="keyword">int</span> type, <span class="keyword">int</span> interval, <span class="keyword">int</span> origin, <span class="keyword">int</span> count) :</span><br><span class="line">        <span class="built_in">demo</span>(demo),</span><br><span class="line">        <span class="built_in">type</span>(type),</span><br><span class="line">        <span class="built_in">interval</span>(interval),</span><br><span class="line">        <span class="built_in">origin</span>(origin),</span><br><span class="line">        <span class="built_in">count</span>(count) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Demo&lt;<span class="keyword">int</span>, IntMake&gt;&amp; demo;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">int</span> interval;</span><br><span class="line">    <span class="keyword">int</span> origin;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief thread info</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadInfo</span> &#123;</span></span><br><span class="line">    <span class="built_in">ThreadInfo</span>(<span class="keyword">const</span> Args&amp; args) :</span><br><span class="line">        <span class="built_in">tid</span>(<span class="number">0</span>),</span><br><span class="line">        <span class="built_in">args</span>(args) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    Args args;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief producer thread function</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">thread_func_send</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    Args* args = (Args*)arg;</span><br><span class="line">    args-&gt;demo.<span class="built_in">send</span>(args-&gt;origin, args-&gt;count, args-&gt;interval);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief consumer thread function</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">thread_func_receive</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    Args* args = (Args*)arg;</span><br><span class="line">    args-&gt;demo.<span class="built_in">receive</span>(args-&gt;interval);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* @brief start to work</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(std::vector&lt;ThreadInfo&gt;&amp; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it : list) &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (it.args.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> TYPE_THREAD_SEND:</span><br><span class="line">            <span class="built_in">pthread_create</span>(&amp;it.tid, <span class="literal">nullptr</span>, thread_func_send, &amp;it.args);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TYPE_THREAD_RECEIVE:</span><br><span class="line">            <span class="built_in">pthread_create</span>(&amp;it.tid, <span class="literal">nullptr</span>, thread_func_receive, &amp;it.args);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it : list) &#123;</span><br><span class="line">        <span class="built_in">pthread_join</span>(it.tid, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Demo&lt;<span class="keyword">int</span>, IntMake&gt; <span class="title">demo</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//configuration of the threads</span></span><br><span class="line">    std::vector&lt;ThreadInfo&gt; list = &#123;</span><br><span class="line">        <span class="built_in">ThreadInfo</span>(<span class="built_in">Args</span>(demo, TYPE_THREAD_SEND, <span class="number">2</span>, <span class="number">1</span>, <span class="number">50</span>)),</span><br><span class="line">        <span class="built_in">ThreadInfo</span>(<span class="built_in">Args</span>(demo, TYPE_THREAD_RECEIVE, <span class="number">2</span>)),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">work</span>(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序配置了一个生产端线程，一个消费端线程，生产端和消费端效率都设置成2ms：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Demo&lt;int, IntMake&gt; demo(10);</span><br><span class="line"></span><br><span class="line">//configuration of the threads</span><br><span class="line">std::vector&lt;ThreadInfo&gt; list = &#123;</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 2, 1, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_RECEIVE, 2)),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>从程序打印输出结果看，生产端和消费端类似于回合制：<br><img src="/queue-with-thread-synchronization/1.png" alt="One to One"></p>
<p>修改配置，降低消费端效率，由原来的2ms修改为20ms：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Demo&lt;int, IntMake&gt; demo(10);</span><br><span class="line"></span><br><span class="line">//configuration of the threads</span><br><span class="line">std::vector&lt;ThreadInfo&gt; list = &#123;</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 2, 1, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_RECEIVE, 20)),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>从程序打印输出结果看，当队列满后（队列容量设置为10），生产端需要等待消费端从队列中拿走数据后方可再生产：<br><img src="/queue-with-thread-synchronization/2.png" alt="One to One"></p>
<p>修改配置，降低生产端效率，由原来的2ms修改为20ms：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Demo&lt;int, IntMake&gt; demo(10);</span><br><span class="line"></span><br><span class="line">//configuration of the threads</span><br><span class="line">std::vector&lt;ThreadInfo&gt; list = &#123;</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 20, 1, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_RECEIVE, 2)),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>从程序打印输出结果看，生产端和消费端又类似于回合制，这是因为消费端效率高，它得等到生产端生产：<br><img src="/queue-with-thread-synchronization/3.png" alt="One to One"></p>
<p>修改配置，生产端数量增加到3，消费端数量不变，生产端效率是20ms，消费端效率是2ms：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Demo&lt;int, IntMake&gt; demo(10);</span><br><span class="line"></span><br><span class="line">//configuration of the threads</span><br><span class="line">std::vector&lt;ThreadInfo&gt; list = &#123;</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 20, 1, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 20, 51, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 20, 101, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_RECEIVE, 2)),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>从程序打印输出结果看，消费端效率还是远高于生产端，即便生产端有3个，但无法填满队列：<br><img src="/queue-with-thread-synchronization/4.png" alt="Many to One"></p>
<p>修改配置，生产端数量依然是3，消费端数量变为2，生产端效率是10ms，消费端效率是2ms：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Demo&lt;int, IntMake&gt; demo(10);</span><br><span class="line"></span><br><span class="line">//configuration of the threads</span><br><span class="line">std::vector&lt;ThreadInfo&gt; list = &#123;</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 10, 1, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 10, 51, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_SEND, 10, 101, 50)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_RECEIVE, 2)),</span><br><span class="line">    ThreadInfo(Args(demo, TYPE_THREAD_RECEIVE, 2)),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>程序打印输出呈现多对多模式：<br><img src="/queue-with-thread-synchronization/5.png" alt="Many to One"></p>
<p>以上是几个示例的演示，配置比较简单，可按自己意思设计（创建生产端另外的两个参数一个是起始数值，一个是生产数量）。</p>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>linux</tag>
        <tag>pthread</tag>
        <tag>queue</tag>
        <tag>synchronization</tag>
      </tags>
  </entry>
  <entry>
    <title>vs2019下的linux环境开发</title>
    <url>/vs2019-for-linux/</url>
    <content><![CDATA[<p>对习惯了 <em>windows</em> 的我来说，<em>vs2019</em> 有个绝妙的功能就是可以进行 <em>linux</em> 环境下的 <em>c/c++</em> 开发，而在此之前我只能是在 <em>windows</em> 上编辑代码，然后通过 <em>github</em> 同步到 <em>ubuntu</em> 上进行编译，整个过程需要来来回回折腾，所以 <em>vs2019</em> 的这项功能极大提高了我的生产力。</p>
<p>以下记录一些使用过程中遇到的问题和解决方法。</p>
<h2 id="linux头文件同步到本地"><a href="#linux头文件同步到本地" class="headerlink" title="linux头文件同步到本地"></a>linux头文件同步到本地</h2><p><em>unistd.h</em> 等头文件是unix/linux环境特有，windows上并不存在，所以在编写代码的时候用不了 <em>vs</em> 的智能感知，而且提示出错的红色波浪线让人看着很不舒服，解决办法就是将这类头文件从远程的 <em>linux</em> 机器同步过来，做法如下：</p>
<ul>
<li>从菜单栏中选择 <strong>Debug-&gt;Options…</strong></li>
</ul>
<p><img src="/vs2019-for-linux/1.png" alt="Debug-&gt;Options..."></p>
<ul>
<li><p>进入 <strong>Cross Platform-&gt;Connection Manager-&gt;Remote Headers IntelliSense Manager</strong>，从服务器列表勾选远程的 <em>linux</em> 服务器（因为我的 <em>linux</em> 放在本机的虚拟机中，所以是127.0.0.1）<br><img src="/vs2019-for-linux/2.png" alt="Cross Platform-&gt;Connection Manager-&gt;Remote Headers IntelliSense Manager"></p>
</li>
<li><p>可以看到智能感知起作用了<br><img src="/vs2019-for-linux/3.png" alt="Linux IntelliSense"></p>
</li>
</ul>
<h2 id="pthread"><a href="#pthread" class="headerlink" title="pthread"></a>pthread</h2><p><em>pthrad</em> 是外部库，如工程中用到，需要在编译的时候手动加上 <em>-lpthread</em> 选项，否则会导致编译出错。但vs2019中没找到添加编译选项的设置，后来发现只要添加库依赖项就行，做法如下：</p>
<ul>
<li>从菜单栏中选择 <em>Project-&gt;xxx Properties</em></li>
</ul>
<p><img src="/vs2019-for-linux/4.png" alt="Project-&gt;xxx Properties"></p>
<ul>
<li>进入 <em>Linker-&gt;Input-&gt;Library Dependencies</em>，添加上 <em>pthread</em>，重新编译就OK了<br><img src="/vs2019-for-linux/5.png" alt="Linker-&gt;Input-&gt;Library Dependencies"></li>
</ul>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>linux</tag>
        <tag>pthread</tag>
        <tag>vs2019</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实现Huffman的编码和解码</title>
    <url>/Huffman-Code-Demo/</url>
    <content><![CDATA[<p>说起 <code>Huffman</code> 的算法原理其实很简单，难在实现过程中对细节的控制，比如 <code>字串流</code> 转换成 <code>比特流</code> ， <code>比特流</code> 转换回 <code>字串流</code> ，这类操作极易出错；再比如要使 <code>解码</code> 过程效率更高，需要让 <code>游标指针</code> 在逐个获取 <code>比特位</code> 的过程中高效地从根节点移动到目标节点，从而获取目标节点对应的解码字符；再就是针对解码所必须的 <code>字符集频率表</code> 如何设计才能最大限度减少体积。总之我的体会就是，若要亲手实现一个各方面鲁棒性良好的 <code>Huffman Code Program</code> 其过程并不那么轻松。</p>
<hr>
<h3 id="输入数据测试"><a href="#输入数据测试" class="headerlink" title="输入数据测试"></a>输入数据测试</h3><p>为检测 <code>Huffman Tree</code> 的构建是否正常，我写了一个测试功能，可以输入字符以及频率来构建一颗 <code>Huffman Tree</code> ，并打印  <code>Huffman Tree</code> 的 <code>树形图</code> 和 <code>编码表</code>，下面展示的是我以数据 <code>&#123;A:1, B:2, C:3, D:4&#125;</code> 的构建效果：</p>
<ul>
<li>输入数据构建 <code>Huffman Tree</code></li>
</ul>
<p><img src="/Huffman-Code-Demo/2.png" alt="Input data to test"></p>
<ul>
<li> <code>Huffman Tree</code> 的 <code>树形图</code> 展现</li>
</ul>
<p><img src="/Huffman-Code-Demo/3.png" alt="Print Huffman Tree"></p>
<ul>
<li> <code>Huffman Tree</code> 的 <code>编码表</code> 展现</li>
</ul>
<p><img src="/Huffman-Code-Demo/4.png" alt="Print Huffman Code List"></p>
<hr>
<h3 id="文件的字符集频率表的设计"><a href="#文件的字符集频率表的设计" class="headerlink" title="文件的字符集频率表的设计"></a>文件的字符集频率表的设计</h3><p>下面说说文件的压缩和解压，文件存储不光要存储压缩数据，还需要在文件头部额外存储 <code>字符集频率表</code> ，目的是为了文件解压时，可根据 <code>字符集频率表</code> 重新构建回 <code>Huffman Tree</code> ，进而在构建的 <code>Huffman Tree</code> 上将压缩数据解码成原始数据。 <code>字符集频率表</code> 应最大限度减少体积，这样才能降低文件的总体积。所以根据上述说法，文件内容将分为两部分： <code>文件头部信息块</code> 和 <code>数据区</code>， <code>文件头部信息块</code> 内含 <code>文件头标识</code> 和 <code>字符集频率表</code>。</p>
<p>还是拿上面的数据 <code>&#123;A:1, B:2, C:3, D:4&#125;</code> 为案例，我的 <code>文件头部信息块</code> 设计如下：<br><img src="/Huffman-Code-Demo/1.png" alt="File Header Info"></p>
<blockquote>
<p>文件头的两个字节是类型标识 ：<code>FX</code> ，用来标识这是一个压缩文件，通过扫描文件头标识，可判断对该文件的操作是压缩还是解压。<br>文件头标识之后是 <code>字符集频率表</code> ，第一个字节是表长，特别注意，它的值在 <code>0 ~ 255</code> 之间，表示的表长的范围是 <code>1 ~ 256</code> 之间，所以字符集 <code>&#123;A:1, B:2, C:3, D:4&#125;</code> 的表长是3而不是4。接下来以每5个字节代表一个字符信息块，其中1个字节存储字符编码剩下4个字节存储该字符的频率，例如 <code>A</code> 的频率是1，所以4个字节中存放的是 <code>&#123;0,0,0,1&#125;</code>，由此可见我的设计尚有压缩空间，如果我用2个 <code>比特位</code> 标识该字符的频率所占用的字节数，那么4个字节的占用将压缩到1个字节，整个 <code>字符集频率表</code> 在理想状况下能缩小一倍以上。如我目前存储上述 <code>字符集频率表</code> 信息需要 <code>1+5*4=21</code> 字节，采用这种方式能压缩到 <code>1+2*4=9</code> 字节。这点留待以后再优化吧。</p>
</blockquote>
<hr>
<h3 id="文件的压缩和解压测试"><a href="#文件的压缩和解压测试" class="headerlink" title="文件的压缩和解压测试"></a>文件的压缩和解压测试</h3><p>拿源文件本身来测试压缩和解压：</p>
<ul>
<li> 读取 <code>demo.c</code> 源文件，构建 <code>Huffman Tree</code> 耗时1毫秒</li>
</ul>
<p><img src="/Huffman-Code-Demo/5.png" alt="Read File"></p>
<ul>
<li> <code>Huffman Tree</code> 的 <code>树形图</code> 展现</li>
</ul>
<p><img src="/Huffman-Code-Demo/6.png" alt="Print Huffman Tree"></p>
<ul>
<li> <code>Huffman Tree</code> 的 <code>编码表</code> 展现</li>
</ul>
<p><img src="/Huffman-Code-Demo/7.png" alt="Print Huffman Code List"></p>
<ul>
<li> 压缩程序源文件 <code>demo.c</code> 耗时9毫秒， <code>字符集频率表</code> 为 <code>803 字节</code> ，原始数据 <code>23565 字节</code>，压缩后 <code>15134 字节</code>，压缩率 <code>64.22%</code> ， 可见 <code>Huffman</code> 算法的压缩率取决于字符频次，如果频次差距越大压缩率越理想，总体来说，对二进制文件的压缩率偏低，对文本的压缩率在 <code>50%</code> 左右，其实也不算很高，所以压缩软件并不会单纯只用 <code>Huffman</code> 算法，而是多种压缩算法协同使用</li>
</ul>
<p><img src="/Huffman-Code-Demo/8.png" alt="Encode"></p>
<ul>
<li> 解压产生的压缩文件 <code>encodefile</code> ，耗时0.89毫秒</li>
</ul>
<p><img src="/Huffman-Code-Demo/9.png" alt="Decode"></p>
<hr>
<h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><p>程序仅使用C的常用标准库函数，且编写采用 <code>C89</code> 标准，其目的是为了让程序拥有更广泛的适应性，以下是程序的完整代码，可供参考：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">* Huffman Code Demo</span></span><br><span class="line"><span class="comment">* Copyright (C) i@foxzzz.com</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* C implementation of the Huffman Code&#x27;s</span></span><br><span class="line"><span class="comment">* encoding and decoding.</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据列表长度*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_SIZE 256</span></span><br><span class="line"><span class="comment">/*构建Huffman树需要产生的森林长度*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOREST_SIZE (LIST_SIZE * 2 - 1)</span></span><br><span class="line"><span class="comment">/*单个数据产生的Huffman编码文本串的最大容量*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE_MAX 2048</span></span><br><span class="line"><span class="comment">/*文件路径长度*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PATH_MAX 1024</span></span><br><span class="line"><span class="comment">/*文件头标识*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> FILE_HEADER_FLAG[] = &#123; <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;X&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*节点标识*/</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    NODE_FLAG_ROOT,          <span class="comment">/*根节点*/</span></span><br><span class="line">    NODE_FLAG_LEFT,          <span class="comment">/*左孩子节点*/</span></span><br><span class="line">    NODE_FLAG_RIGHT          <span class="comment">/*右孩子节点*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*节点类型*/</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    NODE_TYPE_DATA,          <span class="comment">/*数据节点*/</span></span><br><span class="line">    NODE_TYPE_BLANK          <span class="comment">/*空节点*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文件类型*/</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    FILE_TYPE_NULL,          <span class="comment">/*读取出错*/</span></span><br><span class="line">    FILE_TYPE_ENCODE,        <span class="comment">/*原始数据文件*/</span></span><br><span class="line">    FILE_TYPE_DECODE,        <span class="comment">/*压缩数据文件*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字节类型*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Byte;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Huffman树节点*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> type;                <span class="comment">/*节点类型*/</span></span><br><span class="line">    <span class="keyword">int</span> data;                <span class="comment">/*节点数据*/</span></span><br><span class="line">    <span class="keyword">int</span> weight;              <span class="comment">/*节点权重*/</span></span><br><span class="line">    <span class="keyword">char</span> code[CODE_MAX];     <span class="comment">/*Huffman编码*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">tNode</span>* <span class="title">left</span>;</span>     <span class="comment">/*左孩子*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">tNode</span>* <span class="title">right</span>;</span>    <span class="comment">/*右孩子*/</span></span><br><span class="line">&#125;Node, * pNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Huffman树信息*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tHuffmanTree</span> &#123;</span></span><br><span class="line">    pNode root;              <span class="comment">/*根节点*/</span></span><br><span class="line">    <span class="keyword">int</span> total                <span class="comment">/*总字节数*/</span>;</span><br><span class="line">&#125;HuffmanTree, * pHuffmanTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到当前时间戳*/</span></span><br><span class="line"><span class="function">struct timeval <span class="title">startTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">stamp</span>;</span></span><br><span class="line">    gettimeofday(&amp;stamp, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> stamp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算从时间戳到当前时间的毫秒*/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">endTimestamp</span><span class="params">(struct timeval start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> diff_sec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> start_msec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> end_msec = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">end</span>;</span></span><br><span class="line">    gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line">    diff_sec = (<span class="keyword">int</span>)(end.tv_sec - start.tv_sec);</span><br><span class="line">    start_msec = (<span class="keyword">double</span>)start.tv_usec / <span class="number">1000.0</span>;</span><br><span class="line">    end_msec = (diff_sec * <span class="number">1000</span>) + ((<span class="keyword">double</span>)end.tv_usec / <span class="number">1000.0</span>);</span><br><span class="line">    <span class="keyword">return</span> (end_msec - start_msec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建Huffman树的数据节点*/</span></span><br><span class="line"><span class="function">pNode <span class="title">createDataNode</span><span class="params">(<span class="keyword">int</span> data, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">    pNode node = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="built_in">memset</span>(node, <span class="number">0</span>, <span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;type = NODE_TYPE_DATA;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;weight = weight;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建Huffman树的空节点*/</span></span><br><span class="line"><span class="function">pNode <span class="title">createBlankNode</span><span class="params">(<span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">    pNode node = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="built_in">memset</span>(node, <span class="number">0</span>, <span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;type = NODE_TYPE_BLANK;</span><br><span class="line">    node-&gt;weight = weight;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将Huffman树节点添加到森林列表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNodeToList</span><span class="params">(pNode nodelist[], <span class="keyword">int</span> size, pNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; size; ++index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodelist[index] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">/*从表中找到空位放入新节点*/</span></span><br><span class="line">            nodelist[index] = node;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从森林列表弹出权重最低的Huffman树节点*/</span></span><br><span class="line"><span class="function">pNode <span class="title">popMinNodeFromList</span><span class="params">(pNode nodelist[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; size; ++index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodelist[index]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min == <span class="number">-1</span>) &#123;</span><br><span class="line">                min = index;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodelist[min]-&gt;weight &gt; nodelist[index]-&gt;weight) &#123;</span><br><span class="line">                    <span class="comment">/*当发现存在更小权重节点时候更新记录*/</span></span><br><span class="line">                    min = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min != <span class="number">-1</span>) &#123;</span><br><span class="line">        pNode node = nodelist[min];</span><br><span class="line">        nodelist[min] = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过递归遍历方式为Huffman树中的的所有节点产生Huffman编码*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateHuffmanCode</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(root-&gt;left-&gt;code, root-&gt;code);</span><br><span class="line">            <span class="built_in">strcat</span>(root-&gt;left-&gt;code, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">            generateHuffmanCode(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(root-&gt;right-&gt;code, root-&gt;code);</span><br><span class="line">            <span class="built_in">strcat</span>(root-&gt;right-&gt;code, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">            generateHuffmanCode(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*传入权重表构建Huffman树*/</span></span><br><span class="line"><span class="function">pNode <span class="title">buildHuffmanTree</span><span class="params">(<span class="keyword">int</span> times[])</span> </span>&#123;</span><br><span class="line">    pNode nodelist[FOREST_SIZE] = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">    pNode root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">startstamp</span> =</span> startTimestamp();</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">/*创建森林表*/</span></span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; LIST_SIZE; ++index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (times[index] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/*将所有节点逐个放入森林表*/</span></span><br><span class="line">            addNodeToList(nodelist, FOREST_SIZE, createDataNode(index, times[index]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*构建Huffman树*/</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        pNode left = popMinNodeFromList(nodelist, FOREST_SIZE);</span><br><span class="line">        pNode right = popMinNodeFromList(nodelist, FOREST_SIZE);</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">/*当森林中只剩下一颗树节点的时候表示整个Huffman树构建完成*/</span></span><br><span class="line">            root = left;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pNode node = createBlankNode(left-&gt;weight + right-&gt;weight);</span><br><span class="line">            node-&gt;left = left;</span><br><span class="line">            node-&gt;right = right;</span><br><span class="line">            <span class="comment">/*每次从森林表中取出两个最小的节点，并创建新节点重新放入森林表*/</span></span><br><span class="line">            addNodeToList(nodelist, FOREST_SIZE, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    generateHuffmanCode(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       bulid huffman tree : %lf msc\n&quot;</span>, endTimestamp(startstamp));</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在Huffman树中前进一步*/</span></span><br><span class="line"><span class="function">pNode <span class="title">setpHuffmanTree</span><span class="params">(pNode root, <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (flag) &#123;</span><br><span class="line">    <span class="keyword">case</span> NODE_FLAG_LEFT:</span><br><span class="line">        <span class="keyword">return</span> root-&gt;left;</span><br><span class="line">    <span class="keyword">case</span> NODE_FLAG_RIGHT:</span><br><span class="line">        <span class="keyword">return</span> root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过后序遍历的方式销毁Huffman树*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyHuffmanTree</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        destroyHuffmanTree(root-&gt;left);</span><br><span class="line">        destroyHuffmanTree(root-&gt;right);</span><br><span class="line">        <span class="built_in">free</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从文件构建Huffman树*/</span></span><br><span class="line"><span class="function">pNode <span class="title">buildHuffmanTreeFromFile</span><span class="params">(FILE* input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times[LIST_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    Byte byte;</span><br><span class="line">    <span class="keyword">while</span> (fread(&amp;byte, <span class="keyword">sizeof</span>(byte), <span class="number">1</span>, input) == <span class="number">1</span>) &#123;</span><br><span class="line">        ++times[byte];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buildHuffmanTree(times);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算Huffman树的权重总值*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countHuffmanTreeWeightTotal</span><span class="params">(pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="comment">/*只获取有效字符节点*/</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;type == NODE_TYPE_DATA) &#123;</span><br><span class="line">            total = root-&gt;weight;</span><br><span class="line">        &#125;</span><br><span class="line">        total += countHuffmanTreeWeightTotal(root-&gt;left);</span><br><span class="line">        total += countHuffmanTreeWeightTotal(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过递归遍历将Huffman树转换成Huffman表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convertTreeToList</span><span class="params">(pNode root, pNode nodelist[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="comment">/*只获取有效字符节点*/</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;type == NODE_TYPE_DATA) &#123;</span><br><span class="line">            nodelist[root-&gt;data] = root;</span><br><span class="line">        &#125;</span><br><span class="line">        convertTreeToList(root-&gt;left, nodelist);</span><br><span class="line">        convertTreeToList(root-&gt;right, nodelist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清理Huffman表中的空指针，并返回实际的表元素数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trimNodeList</span><span class="params">(pNode nodelist[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; size; ++index) &#123;</span><br><span class="line">        pNode node = nodelist[index];</span><br><span class="line">        <span class="keyword">if</span> (node) &#123;</span><br><span class="line">            nodelist[count++] = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*对文件数据进行Huffman编码*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encodeFileData</span><span class="params">(pNode root, FILE* input, FILE* output)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        Byte byte;</span><br><span class="line">        <span class="keyword">int</span> buffer = <span class="number">0</span>;</span><br><span class="line">        pNode nodelist[LIST_SIZE] = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">        <span class="comment">/*将Huffman树转换成Huffman表*/</span></span><br><span class="line">        convertTreeToList(root, nodelist);</span><br><span class="line">        <span class="keyword">while</span> (fread(&amp;byte, <span class="keyword">sizeof</span>(byte), <span class="number">1</span>, input) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span>* cursor = nodelist[byte]-&gt;code;</span><br><span class="line">            <span class="keyword">while</span> (*cursor) &#123;</span><br><span class="line">                buffer &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (*cursor == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    buffer |= <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    buffer |= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++count;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">8</span>) &#123;</span><br><span class="line">                    Byte byte = (Byte)buffer;</span><br><span class="line">                    fwrite(&amp;byte, <span class="keyword">sizeof</span>(byte), <span class="number">1</span>, output);</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                    buffer = <span class="number">0</span>;</span><br><span class="line">                    ++total;</span><br><span class="line">                &#125;</span><br><span class="line">                ++cursor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            buffer &lt;&lt;= (<span class="number">8</span> - count);</span><br><span class="line">            <span class="keyword">char</span> byte = (<span class="keyword">char</span>)buffer;</span><br><span class="line">            fwrite(&amp;byte, <span class="number">1</span>, <span class="number">1</span>, output);</span><br><span class="line">            ++total;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*对文件数据进行Huffman解码*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decodeFileData</span><span class="params">(pNode root, FILE* input, FILE* output, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        Byte byte;</span><br><span class="line">        pNode cursor = root;</span><br><span class="line">        <span class="keyword">while</span> (fread(&amp;byte, <span class="keyword">sizeof</span>(byte), <span class="number">1</span>, input) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> buffer = byte;</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; <span class="number">8</span>; ++index) &#123;</span><br><span class="line">                buffer &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (!cursor-&gt;left || !cursor-&gt;right) &#123;</span><br><span class="line">                    Byte data = (Byte)cursor-&gt;data;</span><br><span class="line">                    fwrite(&amp;data, <span class="keyword">sizeof</span>(data), <span class="number">1</span>, output);</span><br><span class="line">                    <span class="keyword">if</span> (--count == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cursor = root;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (buffer &amp; ~<span class="number">0xff</span>) &#123;</span><br><span class="line">                    cursor = setpHuffmanTree(cursor, NODE_FLAG_RIGHT);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cursor = setpHuffmanTree(cursor, NODE_FLAG_LEFT);</span><br><span class="line">                &#125;</span><br><span class="line">                buffer &amp;= <span class="number">0xff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*检测是否是可显示字符*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">canShowChar</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ch &gt; <span class="number">32</span> &amp;&amp; ch &lt; <span class="number">127</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过递归遍历方式打印Huffman树*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outputHuffmanTree</span><span class="params">(FILE* output, pNode root, <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">char</span> content[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* flagname[] = &#123; <span class="string">&quot;ROOT&quot;</span>, <span class="string">&quot;LEFT&quot;</span>, <span class="string">&quot;RIGHT&quot;</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> offset = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(root-&gt;code) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; offset; ++index) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;code[index] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(output, <span class="string">&quot; │ &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(output, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (root-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> NODE_TYPE_DATA:</span><br><span class="line">            <span class="built_in">sprintf</span>(content, <span class="string">&quot;&gt; %-6s #%-4d 0x%02X : &#x27;%c&#x27;&quot;</span>, flagname[flag], root-&gt;weight, root-&gt;data, canShowChar((<span class="keyword">char</span>)root-&gt;data) ? root-&gt;data : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> NODE_TYPE_BLANK:</span><br><span class="line">            <span class="built_in">sprintf</span>(content, <span class="string">&quot;[+] %-6s #%-4d&quot;</span>, flagname[flag], root-&gt;weight);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">case</span> NODE_FLAG_ROOT:</span><br><span class="line">            <span class="built_in">fprintf</span>(output, <span class="string">&quot;%s&quot;</span>, content);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> NODE_FLAG_LEFT:</span><br><span class="line">            <span class="built_in">fprintf</span>(output, <span class="string">&quot; ├─%s&quot;</span>, content);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> NODE_FLAG_RIGHT:</span><br><span class="line">            <span class="built_in">fprintf</span>(output, <span class="string">&quot; └─%s&quot;</span>, content);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;type == NODE_TYPE_DATA) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(output, <span class="string">&quot; CODE : %s\n&quot;</span>, root-&gt;code);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(output, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        outputHuffmanTree(output, root-&gt;left, NODE_FLAG_LEFT);</span><br><span class="line">        outputHuffmanTree(output, root-&gt;right, NODE_FLAG_RIGHT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印Huffman树*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHuffmanTree</span><span class="params">(FILE* output, pNode root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;       Print Huffman Tree\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    outputHuffmanTree(output, root, NODE_FLAG_ROOT);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将Huffman表中的数据输出成编码和权重统计表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHuffmanList</span><span class="params">(FILE* output, pNode root)</span> </span>&#123;</span><br><span class="line">    pNode nodelist[LIST_SIZE] = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> listcount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*将Huffman树转换成Huffman表*/</span></span><br><span class="line">    convertTreeToList(root, nodelist);</span><br><span class="line">    listcount = trimNodeList(nodelist, LIST_SIZE);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;        # Print Huffman Code List #\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;                       Total : %d\n&quot;</span>, listcount);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(output, <span class="string">&quot;     %-7s%-10s%-10s%s\n&quot;</span>, <span class="string">&quot;ASCII&quot;</span>, <span class="string">&quot;Char&quot;</span>, <span class="string">&quot;Weight&quot;</span>, <span class="string">&quot;Code&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; listcount; ++index) &#123;</span><br><span class="line">        pNode node = nodelist[index];</span><br><span class="line">        Byte ch = (Byte)node-&gt;data;</span><br><span class="line">        <span class="keyword">if</span> (canShowChar((<span class="keyword">char</span>)ch)) &#123;</span><br><span class="line">            <span class="comment">/*可显示字符的输出*/</span></span><br><span class="line">            <span class="built_in">fprintf</span>(output, <span class="string">&quot;     %-7d%-10c%-10d%s\n&quot;</span>, ch, ch, node-&gt;weight, node-&gt;code);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*不可显示字符的输出*/</span></span><br><span class="line">            <span class="built_in">fprintf</span>(output, <span class="string">&quot;     %-7d%-10s%-10d%s\n&quot;</span>, ch, <span class="string">&quot;NOShow&quot;</span>, node-&gt;weight, node-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*统计输入的字符权重*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contUserInputTimes</span><span class="params">(<span class="keyword">int</span> times[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index, count;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        # Input data to test #\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        Number of input nodes : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        Enter the letters and weights for each node : \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; count; ++index) &#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> weight = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        Char   : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        Weight : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;weight);</span><br><span class="line">        times[(<span class="keyword">int</span>)str[<span class="number">0</span>]] = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入数据构建Huffman树选项*/</span></span><br><span class="line"><span class="function">pNode <span class="title">inputDataToBuildHuffmanTreeOption</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times[LIST_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    contUserInputTimes(times);</span><br><span class="line">    <span class="keyword">return</span> buildHuffmanTree(times);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取输入选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inputOption</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> opt;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (opt &gt;= begin &amp;&amp; opt &lt;= end) &#123;</span><br><span class="line">                <span class="keyword">return</span> opt;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       error : The input range should be between %d and %d.\n&quot;</span>, begin, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       error : Please enter integer type.\n&quot;</span>);</span><br><span class="line">            <span class="comment">/*清空缓冲区*/</span></span><br><span class="line">            setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*检测文件类型*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFileType</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> filename[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> type = FILE_TYPE_NULL;</span><br><span class="line">    FILE* input = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (input) &#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        type = FILE_TYPE_ENCODE;</span><br><span class="line">        <span class="keyword">if</span> (fread(buffer, <span class="number">2</span>, <span class="number">1</span>, input) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (buffer[<span class="number">0</span>] == FILE_HEADER_FLAG[<span class="number">0</span>] &amp;&amp; buffer[<span class="number">1</span>] == FILE_HEADER_FLAG[<span class="number">1</span>]) &#123;</span><br><span class="line">                type = FILE_TYPE_DECODE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*写入文件头信息（文件头含文件头标识和字符权重集）*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">writeFileHeader</span><span class="params">(pNode root, FILE* output)</span> </span>&#123;</span><br><span class="line">    pNode nodelist[LIST_SIZE] = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">    Byte total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">/*写入文件头标识*/</span></span><br><span class="line">    fwrite(FILE_HEADER_FLAG, <span class="number">2</span>, <span class="number">1</span>, output);</span><br><span class="line">    convertTreeToList(root, nodelist);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 为节省空间字符集总量存储为1个字节</span></span><br><span class="line"><span class="comment">    * 总量1用0表示，总量256用255表示</span></span><br><span class="line"><span class="comment">    * 所以总量 - 1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    total = (Byte)(trimNodeList(nodelist, LIST_SIZE) - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*写入字符集总数*/</span></span><br><span class="line">    fwrite(&amp;total, <span class="keyword">sizeof</span>(total), <span class="number">1</span>, output);</span><br><span class="line">    <span class="comment">/*写入每个字符以及权重*/</span></span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt;= total; ++index) &#123;</span><br><span class="line">        pNode node = nodelist[index];</span><br><span class="line">        Byte byte = (Byte)node-&gt;data;</span><br><span class="line">        fwrite(&amp;byte, <span class="keyword">sizeof</span>(byte), <span class="number">1</span>, output);</span><br><span class="line">        fwrite(&amp;node-&gt;weight, <span class="keyword">sizeof</span>(node-&gt;weight), <span class="number">1</span>, output);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*返回写入的文件头总字节数*/</span></span><br><span class="line">    <span class="keyword">return</span> (total * <span class="number">5</span> + <span class="number">1</span> + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取文件头信息（读取字符权重集）*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readFileHeader</span><span class="params">(FILE* input, <span class="keyword">int</span> times[])</span> </span>&#123;</span><br><span class="line">    Byte total;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">/*跳过文件头*/</span></span><br><span class="line">    fseek(input, <span class="number">2</span>, SEEK_CUR);</span><br><span class="line">    fread(&amp;total, <span class="keyword">sizeof</span>(total), <span class="number">1</span>, input);</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt;= total; ++index) &#123;</span><br><span class="line">        Byte byte;</span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line">        fread(&amp;byte, <span class="keyword">sizeof</span>(byte), <span class="number">1</span>, input);</span><br><span class="line">        fread(&amp;weight, <span class="keyword">sizeof</span>(weight), <span class="number">1</span>, input);</span><br><span class="line">        times[byte] = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*对文件进行编码*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toEncode</span><span class="params">(pNode root, FILE* input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> filename[PATH_MAX] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    FILE* output = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        # Write File #\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       write file name : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, filename);</span><br><span class="line">    output = fopen(filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (output) &#123;</span><br><span class="line">        <span class="keyword">int</span> rawsize = countHuffmanTreeWeightTotal(root);</span><br><span class="line">        <span class="keyword">int</span> header_size = writeFileHeader(root, output);</span><br><span class="line">        <span class="keyword">if</span> (input) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">startstamp</span> =</span> startTimestamp();</span><br><span class="line">            <span class="keyword">int</span> compressedsize = encodeFileData(root, input, output);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       Elapsed Time      : %lf msc\n&quot;</span>, endTimestamp(startstamp));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       Character Set     : %d Bytes\n&quot;</span>, header_size);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       Compressed Data   : %d Bytes\n&quot;</span>, compressedsize);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       Raw Data          : %d Bytes\n&quot;</span>, rawsize);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       Compression Ratio : %.2lf%%\n&quot;</span>, (compressedsize / (<span class="keyword">double</span>)rawsize) * <span class="number">100</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       Execute successfully.\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to read file.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(output);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to write file.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*对文件进行解码*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toDecode</span><span class="params">(pNode root, FILE* input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> filename[PATH_MAX] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    FILE* output = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        # Write File #\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       write file name : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, filename);</span><br><span class="line">    output = fopen(filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (output) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">startstamp</span> =</span> startTimestamp();</span><br><span class="line">        decodeFileData(root, input, output, countHuffmanTreeWeightTotal(root));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       Elapsed Time      : %lf msc\n&quot;</span>, endTimestamp(startstamp));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       Execute successfully.\n&quot;</span>);</span><br><span class="line">        fclose(output);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to write file.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文件编码选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encodeFileOption</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> filename[])</span> </span>&#123;</span><br><span class="line">    FILE* input = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (input) &#123;</span><br><span class="line">        pNode root = buildHuffmanTreeFromFile(input);</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> option;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;        # Encode File #\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       1 &gt; Print Huffman Tree\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       2 &gt; Print Huffman Code List\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       3 &gt; Encode File\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       0 &gt; Back\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                option = inputOption(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (option == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    printHuffmanTree(<span class="built_in">stdout</span>, root);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    printHuffmanList(<span class="built_in">stdout</span>, root);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="comment">/*重置文件指针到文件头*/</span></span><br><span class="line">                    fseek(input, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">                    toEncode(root, input);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">            destroyHuffmanTree(root);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to build Huffman tree.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(input);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to read file.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文件解码选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decodeFileOption</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> filename[])</span> </span>&#123;</span><br><span class="line">    FILE* input = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (input) &#123;</span><br><span class="line">        <span class="keyword">int</span> tell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> times[LIST_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        readFileHeader(input, times);</span><br><span class="line">        <span class="comment">/*记录文件数据区位置*/</span></span><br><span class="line">        tell = (<span class="keyword">int</span>)ftell(input);</span><br><span class="line">        pNode root = buildHuffmanTree(times);</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> option;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;        # Decode File #\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       1 &gt; Print Huffman Tree\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       2 &gt; Print Huffman Code List\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       3 &gt; Decode File\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;       0 &gt; Back\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                option = inputOption(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (option == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    printHuffmanTree(<span class="built_in">stdout</span>, root);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    printHuffmanList(<span class="built_in">stdout</span>, root);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="comment">/*将文件指针定位到数据区*/</span></span><br><span class="line">                    fseek(input, tell, SEEK_SET);</span><br><span class="line">                    toDecode(root, input);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">            destroyHuffmanTree(root);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to build Huffman tree.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(input);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to read file.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读文件选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readFileOption</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> filename[PATH_MAX] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        # Read File #\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       input file name : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, filename);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (getFileType(filename)) &#123;</span><br><span class="line">    <span class="keyword">case</span> FILE_TYPE_ENCODE:</span><br><span class="line">        encodeFileOption(filename);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FILE_TYPE_DECODE:</span><br><span class="line">        decodeFileOption(filename);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       error : Failed to read file.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*测试选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputDataToTestOption</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pNode root = inputDataToBuildHuffmanTreeOption();</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> option;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       1 &gt; Print Huffman Tree\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       2 &gt; Print Huffman Code List\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;       0 &gt; Back\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            option = inputOption(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (option == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                printHuffmanTree(<span class="built_in">stdout</span>, root);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                printHuffmanList(<span class="built_in">stdout</span>, root);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">        destroyHuffmanTree(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Huffman功能演示*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huffmanDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> option;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    *******************************\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        # Huffman Tree Demo #\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       1 &gt; Read file\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       2 &gt; Input data to test\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;       0 &gt; Quit\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        option = inputOption(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (option == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            readFileOption();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            inputDataToTestOption();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    huffmanDemo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>huffman</tag>
      </tags>
  </entry>
  <entry>
    <title>收录一些有用的网站</title>
    <url>/site-collection/</url>
    <content><![CDATA[<p>平时学习会遇到一些有用的网站，将它们收录在这里。</p>
<ul>
<li><p><a href="https://csacademy.com/app/graph_editor/">图论算法演示器</a></p>
</li>
<li><p><a href="https://www.processon.com/">在线作图工具</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>网站收藏</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++初学者练习题库（Dev-C++开发环境）</title>
    <url>/cpp-quiz/</url>
    <content><![CDATA[<p>几年前制作的一套 <code>C/C++</code> 程序题库，其目的是为了使学生在课堂上熟悉掌握 <code>C/C++</code> 基础知识。程序自带检验和错误反馈功能，并有积分激励机制，当时学校机房电脑只配置了 <code>Dev-C++</code> 开发环境， 所以为了便于学生使用，题库的设计也就以在 <code>Dev-C++</code> 开发环境上使用方便为目的。学生使用效果不错，课上的学习氛围有所提高，后来也给过一些想学 <code>C/C++</code> 的朋友，都觉得的确对于 <code>C/C++</code> 初学者有一定的帮助。</p>
<p>这套程序题库有点类似于 <code>Online Judge</code> ，只不过它是在 <code>Dev-C++</code> 本机环境中使用（其实也可以在其他开发环境例如 <code>visual  studio</code>、<code>code::blocks</code> 中使用，但是没有 <code>Dev-C++</code> 那么方便）。但与 <code>Online Judge</code> 的设计思想完全不同，<code>Online Judge</code> 是黑盒测试，并不会给使用者过多的反馈，代码粘贴到网页中执行也缺乏本机环境的编辑调试能力，它是为算法竞赛而设计；但这套程序题库的设计思想是教会 <code>C/C++</code> 初学者基础知识，所以题库设计难度循序渐进，起到对初学者逐步建立起程序思维的作用，直接在开发环境中编辑和调试代码，有助于初学者对开发环境的熟悉掌握， 并且在程序执行结果不对的时候给予充足的提示信息以帮助初学者纠正错误。</p>
<p>虽然题库的使用非常简单，但每次还是少不了要教人一遍用法，为方便日后有人再问起，我写个使用教程。</p>
<hr>
<ul>
<li><p>安装 <code>Dev-C++</code> 开发环境</p>
</li>
<li><p>下载题库并解压（先解压，别直接在压缩包中使用）</p>
</li>
</ul>
<p>下载链接：<a href="https://github.com/ifoxzzz/cpp-quiz/archive/refs/heads/master.zip"><em><strong>cpp-quiz</strong></em></a></p>
<ul>
<li>解压目录下的每个 <code>*.cpp</code>源文件是独立的一道题，启动 <code>Dev-C++</code> 开发环境，拖拽其中一个文件到 <code>Dev-C++</code> 开发环境的窗口界面</li>
</ul>
<p><img src="/cpp-quiz/1.png" alt="*.cpp to Dev-C++"></p>
<ul>
<li>根据题目要求，补充代码并编译运行</li>
</ul>
<p><img src="/cpp-quiz/2.png" alt="build &amp; run Dev-C++"></p>
<ul>
<li>程序测试给出的反馈</li>
</ul>
<p><img src="/cpp-quiz/3.png" alt="test list"></p>
<ul>
<li>如果全部测试通过，可按下回车查看总得分</li>
</ul>
<p><img src="/cpp-quiz/4.png" alt="score"></p>
<ul>
<li>如果发生部分测试未通过，可按下回车查看错误提示</li>
</ul>
<p><img src="/cpp-quiz/5.png" alt="error"></p>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>Dev-C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++代码混淆器</title>
    <url>/c-cpp-disorder/</url>
    <content><![CDATA[<p>试图通过混淆 <code>C/C++</code> 源代码以达到保护知识产权的目的的做法其实就是自欺欺人，因为不论如何混淆代码，到了编译阶段代码终究是要被还原成它本来的样子，说到底，这只是一层窗户纸而已。</p>
<p>我曾利用 <code>宏</code> 机制实现过一个 <code>C/C++</code> 代码混淆器，效果乍一看还真能给人一种眼前一亮的神奇，但在 <em>行家</em> 眼里这真就是一层窗户纸而已——捅破它只需一个编译命令 <em><strong><code>gcc -E </code></strong></em> 。但若只为了阻挡伸手党白嫖你的代码，嘿嘿，它还是能起到一定的作用滴٩(๑&gt;◡&lt;๑)۶ </p>
<hr>
<h3 id="混淆效果"><a href="#混淆效果" class="headerlink" title="混淆效果"></a>混淆效果</h3><ul>
<li>找一段 <code>C</code> 语言代码测试下混淆效果，下面是原始代码</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">* 图书信息管理系统</span></span><br><span class="line"><span class="comment">* Copyright (C) i@foxzzz.com</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* C语言实现的命令行模式下的信息管理系统。</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BORROW_COUNT_MAX 10     <span class="comment">/*最多可借阅的图书数量*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHOW_BOOK_PAGE_COUNT 20 <span class="comment">/*一页显示的图书条目*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*用户权限*/</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UserRank</span> &#123;</span></span><br><span class="line">    NORMAL,     <span class="comment">/*普通用户*/</span></span><br><span class="line">    MANAGER     <span class="comment">/*管理员*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用户结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tUserInfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>];               <span class="comment">/*账号*/</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];             <span class="comment">/*姓名*/</span></span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">256</span>];         <span class="comment">/*密码*/</span></span><br><span class="line">    <span class="keyword">int</span> rank;                   <span class="comment">/*权限*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">tUserInfo</span>* <span class="title">next</span>;</span>    <span class="comment">/*下一个节点*/</span></span><br><span class="line">&#125; UserInfo, * pUserInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图书结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tBookInfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>];               <span class="comment">/*编号*/</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];             <span class="comment">/*书名*/</span></span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">256</span>];           <span class="comment">/*作者*/</span></span><br><span class="line">    <span class="keyword">char</span> press[<span class="number">256</span>];            <span class="comment">/*出版社*/</span></span><br><span class="line">    <span class="keyword">char</span> type[<span class="number">256</span>];             <span class="comment">/*类型*/</span></span><br><span class="line">    <span class="keyword">char</span> time[<span class="number">256</span>];             <span class="comment">/*出版时间*/</span></span><br><span class="line">    <span class="keyword">double</span> price;               <span class="comment">/*价格*/</span></span><br><span class="line">    <span class="keyword">int</span> stock;                  <span class="comment">/*库存*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">tBookInfo</span>* <span class="title">next</span>;</span>    <span class="comment">/*下一个节点*/</span></span><br><span class="line">&#125; BookInfo, * pBookInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*借阅记录结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tRecordInfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> user_id[<span class="number">128</span>];                      <span class="comment">/*借阅人账号*/</span></span><br><span class="line">    <span class="keyword">char</span> book_id[BORROW_COUNT_MAX][<span class="number">128</span>];    <span class="comment">/*图书编号*/</span></span><br><span class="line">    <span class="keyword">int</span> count;                              <span class="comment">/*借阅数量*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">tRecordInfo</span>* <span class="title">next</span>;</span>              <span class="comment">/*下一个节点*/</span></span><br><span class="line">&#125; RecordInfo, * pRecordInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空输入缓冲区*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">emptyStdin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; c != EOF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*等待按下任意键*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">waitingPressAnyKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    emptyStdin();</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清屏*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从标准输入一行文本*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputLine</span><span class="params">(<span class="keyword">char</span>* line, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fgets(line, capacity, <span class="built_in">stdin</span>)) &#123;</span><br><span class="line">            <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(line);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                line[len - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入密码*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputPassword</span><span class="params">(<span class="keyword">char</span>* password, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; capacity) &#123;</span><br><span class="line">        <span class="keyword">int</span> ch = _getch();</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span> || ch == <span class="string">&#x27;\r&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                password[index] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;\b&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                --index;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;\b&#x27;</span>);</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;\b&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            password[index++] = ch;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加用户节点，返回链表首节点指针*/</span></span><br><span class="line"><span class="function">pUserInfo <span class="title">addUserInfoNode</span><span class="params">(pUserInfo head, pUserInfo node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">        pUserInfo cursor = head;</span><br><span class="line">        <span class="keyword">while</span> (cursor-&gt;next) &#123;</span><br><span class="line">            cursor = cursor-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*将新节点插入到链表尾部*/</span></span><br><span class="line">        cursor-&gt;next = node;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*链表为空返回该节点*/</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除用户节点，返回链表首节点指针*/</span></span><br><span class="line"><span class="function">pUserInfo <span class="title">removeUserInfoNode</span><span class="params">(pUserInfo head, pUserInfo node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == node) &#123;</span><br><span class="line">            <span class="comment">/*删除节点为首节点*/</span></span><br><span class="line">            head = node-&gt;next;</span><br><span class="line">            <span class="comment">/*删除该节点*/</span></span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pUserInfo cursor = head;</span><br><span class="line">            <span class="keyword">while</span> (cursor-&gt;next) &#123;</span><br><span class="line">                <span class="comment">/*找到要删除节点的上一个节点*/</span></span><br><span class="line">                <span class="keyword">if</span> (cursor-&gt;next == node) &#123;</span><br><span class="line">                    <span class="comment">/*将上一个节点指向删除节点的下一个节点*/</span></span><br><span class="line">                    cursor-&gt;next = node-&gt;next;</span><br><span class="line">                    <span class="comment">/*删除该节点*/</span></span><br><span class="line">                    <span class="built_in">free</span>(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cursor = cursor-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过账号查找用户节点*/</span></span><br><span class="line"><span class="function">pUserInfo <span class="title">findUserInfoNode</span><span class="params">(pUserInfo head, <span class="keyword">char</span>* id)</span> </span>&#123;</span><br><span class="line">    pUserInfo cursor = head;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        <span class="comment">/*匹配用户*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cursor-&gt;id, id) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算用户节点数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countUserInfoNode</span><span class="params">(pUserInfo head)</span> </span>&#123;</span><br><span class="line">    pUserInfo cursor = head;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加图书节点，返回链表首节点指针*/</span></span><br><span class="line"><span class="function">pBookInfo <span class="title">addBookInfoNode</span><span class="params">(pBookInfo head, pBookInfo node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">        pBookInfo cursor = head;</span><br><span class="line">        <span class="keyword">while</span> (cursor-&gt;next) &#123;</span><br><span class="line">            cursor = cursor-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*将新节点插入到链表尾部*/</span></span><br><span class="line">        cursor-&gt;next = node;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*链表为空返回该节点*/</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除图书节点，返回链表首节点指针*/</span></span><br><span class="line"><span class="function">pBookInfo <span class="title">removeBookInfoNode</span><span class="params">(pBookInfo head, pBookInfo node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == node) &#123;</span><br><span class="line">            <span class="comment">/*删除节点为首节点*/</span></span><br><span class="line">            head = node-&gt;next;</span><br><span class="line">            <span class="comment">/*删除该节点*/</span></span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pBookInfo cursor = head;</span><br><span class="line">            <span class="keyword">while</span> (cursor-&gt;next) &#123;</span><br><span class="line">                <span class="comment">/*找到要删除节点的上一个节点*/</span></span><br><span class="line">                <span class="keyword">if</span> (cursor-&gt;next == node) &#123;</span><br><span class="line">                    <span class="comment">/*将上一个节点指向删除节点的下一个节点*/</span></span><br><span class="line">                    cursor-&gt;next = node-&gt;next;</span><br><span class="line">                    <span class="comment">/*删除该节点*/</span></span><br><span class="line">                    <span class="built_in">free</span>(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cursor = cursor-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过账号查找图书节点*/</span></span><br><span class="line"><span class="function">pBookInfo <span class="title">findBookInfoNodeByID</span><span class="params">(pBookInfo head, <span class="keyword">char</span>* id)</span> </span>&#123;</span><br><span class="line">    pBookInfo cursor = head;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        <span class="comment">/*匹配图书*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cursor-&gt;id, id) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过书名查找图书节点*/</span></span><br><span class="line"><span class="function">pBookInfo <span class="title">findBookInfoNodeByName</span><span class="params">(pBookInfo head, <span class="keyword">char</span>* name)</span> </span>&#123;</span><br><span class="line">    pBookInfo cursor = head;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        <span class="comment">/*匹配图书*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cursor-&gt;name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过作者查找图书节点*/</span></span><br><span class="line"><span class="function">pBookInfo <span class="title">findBookInfoNodeByAuthor</span><span class="params">(pBookInfo head, <span class="keyword">char</span>* author)</span> </span>&#123;</span><br><span class="line">    pBookInfo cursor = head;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        <span class="comment">/*匹配图书*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cursor-&gt;author, author) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过出版社查找图书节点*/</span></span><br><span class="line"><span class="function">pBookInfo <span class="title">findBookInfoNodeByPress</span><span class="params">(pBookInfo head, <span class="keyword">char</span>* press)</span> </span>&#123;</span><br><span class="line">    pBookInfo cursor = head;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        <span class="comment">/*匹配图书*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cursor-&gt;press, press) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算图书节点数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countBookInfoNode</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    pBookInfo cursor = head;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加记录节点，返回链表首节点指针*/</span></span><br><span class="line"><span class="function">pRecordInfo <span class="title">addRecordInfoNode</span><span class="params">(pRecordInfo head, pRecordInfo node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">        pRecordInfo cursor = head;</span><br><span class="line">        <span class="keyword">while</span> (cursor-&gt;next) &#123;</span><br><span class="line">            cursor = cursor-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*将新节点插入到链表尾部*/</span></span><br><span class="line">        cursor-&gt;next = node;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*链表为空返回该节点*/</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除记录节点，返回链表首节点指针*/</span></span><br><span class="line"><span class="function">pRecordInfo <span class="title">removeRecordInfoNode</span><span class="params">(pRecordInfo head, pRecordInfo node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == node) &#123;</span><br><span class="line">            <span class="comment">/*删除节点为首节点*/</span></span><br><span class="line">            head = node-&gt;next;</span><br><span class="line">            <span class="comment">/*删除该节点*/</span></span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pRecordInfo cursor = head;</span><br><span class="line">            <span class="keyword">while</span> (cursor-&gt;next) &#123;</span><br><span class="line">                <span class="comment">/*找到要删除节点的上一个节点*/</span></span><br><span class="line">                <span class="keyword">if</span> (cursor-&gt;next == node) &#123;</span><br><span class="line">                    <span class="comment">/*将上一个节点指向删除节点的下一个节点*/</span></span><br><span class="line">                    cursor-&gt;next = node-&gt;next;</span><br><span class="line">                    <span class="comment">/*删除该节点*/</span></span><br><span class="line">                    <span class="built_in">free</span>(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cursor = cursor-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过账号查找记录节点*/</span></span><br><span class="line"><span class="function">pRecordInfo <span class="title">findRecordInfoNodeByID</span><span class="params">(pRecordInfo head, <span class="keyword">char</span>* id)</span> </span>&#123;</span><br><span class="line">    pRecordInfo cursor = head;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        <span class="comment">/*匹配用户*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cursor-&gt;user_id, id) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算记录节点数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countRecordInfoNode</span><span class="params">(pRecordInfo head)</span> </span>&#123;</span><br><span class="line">    pRecordInfo cursor = head;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将用户信息存储到文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUserInfoFile</span><span class="params">(<span class="keyword">const</span> pUserInfo head)</span> </span>&#123;</span><br><span class="line">    pUserInfo cursor = head;</span><br><span class="line">    FILE* file = fopen(<span class="string">&quot;userinfo.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = countUserInfoNode(head);</span><br><span class="line">        <span class="comment">/*将用户节点总数写入文件起始位置*/</span></span><br><span class="line">        fwrite(&amp;count, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, file);</span><br><span class="line">        <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">            fwrite(cursor, <span class="keyword">sizeof</span>(UserInfo), <span class="number">1</span>, file);</span><br><span class="line">            cursor = cursor-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;写文件失败！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从文件中加载用户信息*/</span></span><br><span class="line"><span class="function">pUserInfo <span class="title">loadUserInfoFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pUserInfo head = <span class="literal">NULL</span>;</span><br><span class="line">    FILE* file = fopen(<span class="string">&quot;userinfo.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*读取文件起始位置的节点总数*/</span></span><br><span class="line">        fread(&amp;count, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, file);</span><br><span class="line">        <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">            pUserInfo user = (pUserInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(UserInfo));</span><br><span class="line">            <span class="built_in">memset</span>(user, <span class="number">0</span>, <span class="keyword">sizeof</span>(UserInfo));</span><br><span class="line">            fread(user, <span class="keyword">sizeof</span>(UserInfo), <span class="number">1</span>, file);</span><br><span class="line">            <span class="comment">/*将指向下个节点的指针重置成NULL*/</span></span><br><span class="line">            user-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            head = addUserInfoNode(head, user);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读文件失败！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清理用户列表，回收内存*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearUserInfoList</span><span class="params">(pUserInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        head = removeUserInfoNode(head, head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将图书信息存储到文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBookInfoFile</span><span class="params">(<span class="keyword">const</span> pBookInfo head)</span> </span>&#123;</span><br><span class="line">    pBookInfo cursor = head;</span><br><span class="line">    FILE* file = fopen(<span class="string">&quot;bookinfo.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = countBookInfoNode(head);</span><br><span class="line">        <span class="comment">/*将用户节点总数写入文件起始位置*/</span></span><br><span class="line">        fwrite(&amp;count, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, file);</span><br><span class="line">        <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">            fwrite(cursor, <span class="keyword">sizeof</span>(BookInfo), <span class="number">1</span>, file);</span><br><span class="line">            cursor = cursor-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;写文件失败！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从文件中加载用户信息*/</span></span><br><span class="line"><span class="function">pBookInfo <span class="title">loadBookInfoFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pBookInfo head = <span class="literal">NULL</span>;</span><br><span class="line">    FILE* file = fopen(<span class="string">&quot;bookinfo.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*读取文件起始位置的节点总数*/</span></span><br><span class="line">        fread(&amp;count, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, file);</span><br><span class="line">        <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">            pBookInfo book = (pBookInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BookInfo));</span><br><span class="line">            <span class="built_in">memset</span>(book, <span class="number">0</span>, <span class="keyword">sizeof</span>(BookInfo));</span><br><span class="line">            fread(book, <span class="keyword">sizeof</span>(BookInfo), <span class="number">1</span>, file);</span><br><span class="line">            <span class="comment">/*将指向下个节点的指针重置成NULL*/</span></span><br><span class="line">            book-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            head = addBookInfoNode(head, book);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读文件失败！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清理图书列表，回收内存*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearBookInfoList</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        head = removeBookInfoNode(head, head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将记录信息存储到文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveRecordInfoFile</span><span class="params">(<span class="keyword">const</span> pRecordInfo head)</span> </span>&#123;</span><br><span class="line">    pRecordInfo cursor = head;</span><br><span class="line">    FILE* file = fopen(<span class="string">&quot;recordinfo.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = countRecordInfoNode(head);</span><br><span class="line">        <span class="comment">/*将用户节点总数写入文件起始位置*/</span></span><br><span class="line">        fwrite(&amp;count, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, file);</span><br><span class="line">        <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">            fwrite(cursor, <span class="keyword">sizeof</span>(RecordInfo), <span class="number">1</span>, file);</span><br><span class="line">            cursor = cursor-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;写文件失败！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从文件中加载记录信息*/</span></span><br><span class="line"><span class="function">pRecordInfo <span class="title">loadRecordInfoFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pRecordInfo head = <span class="literal">NULL</span>;</span><br><span class="line">    FILE* file = fopen(<span class="string">&quot;recordinfo.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*读取文件起始位置的节点总数*/</span></span><br><span class="line">        fread(&amp;count, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, file);</span><br><span class="line">        <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">            pRecordInfo book = (pRecordInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RecordInfo));</span><br><span class="line">            <span class="built_in">memset</span>(book, <span class="number">0</span>, <span class="keyword">sizeof</span>(RecordInfo));</span><br><span class="line">            fread(book, <span class="keyword">sizeof</span>(RecordInfo), <span class="number">1</span>, file);</span><br><span class="line">            <span class="comment">/*将指向下个节点的指针重置成NULL*/</span></span><br><span class="line">            book-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            head = addRecordInfoNode(head, book);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读文件失败！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清理记录列表，回收内存*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearRecordInfoList</span><span class="params">(pRecordInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        head = removeRecordInfoNode(head, head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*显示用户信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showUser</span><span class="params">(pUserInfo user)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;┌-------------------------------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    账号：%s\n&quot;</span>, user-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    姓名：%s\n&quot;</span>, user-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    密码：%s\n&quot;</span>, user-&gt;password);</span><br><span class="line">    <span class="keyword">switch</span> (user-&gt;rank) &#123;</span><br><span class="line">    <span class="keyword">case</span> NORMAL:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    权限：%s\n&quot;</span>, <span class="string">&quot;普通用户&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MANAGER:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    权限：%s\n&quot;</span>, <span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;└-------------------------------------------------┘\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编辑用户信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">editUser</span><span class="params">(pUserInfo user)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;┌-------------------------------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    账号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, user-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    姓名：&quot;</span>);</span><br><span class="line">    inputLine(user-&gt;name, <span class="keyword">sizeof</span>(user-&gt;name));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    密码：&quot;</span>);</span><br><span class="line">    inputPassword(user-&gt;password, <span class="keyword">sizeof</span>(user-&gt;password));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    权限：（0：普通用户， 1：管理员）&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;user-&gt;rank);</span><br><span class="line">    <span class="keyword">if</span> (user-&gt;rank != NORMAL &amp;&amp; user-&gt;rank != MANAGER) &#123;</span><br><span class="line">        user-&gt;rank = NORMAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;└-------------------------------------------------┘\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*显示图书信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showBook</span><span class="params">(pBookInfo book)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;┌-------------------------------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    书名：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    作者：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book-&gt;author);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    出版社：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book-&gt;press);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    类型：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book-&gt;type);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    出版时间：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book-&gt;time);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    价格：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, book-&gt;price);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    库存：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, book-&gt;stock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;└-------------------------------------------------┘\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编辑图书信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">editBook</span><span class="params">(pBookInfo book)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;┌-------------------------------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    编号：&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(book-&gt;id)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book-&gt;id);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book-&gt;id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    书名：&quot;</span>);</span><br><span class="line">    inputLine(book-&gt;name, <span class="keyword">sizeof</span>(book-&gt;name));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    作者：&quot;</span>);</span><br><span class="line">    inputLine(book-&gt;author, <span class="keyword">sizeof</span>(book-&gt;author));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    出版社：&quot;</span>);</span><br><span class="line">    inputLine(book-&gt;press, <span class="keyword">sizeof</span>(book-&gt;press));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    类型：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book-&gt;type);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    出版时间：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book-&gt;time);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    价格：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;book-&gt;price);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    库存：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;book-&gt;stock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;└-------------------------------------------------┘\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*显示用户清单选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showUserListOption</span><span class="params">(pUserInfo head)</span> </span>&#123;</span><br><span class="line">    pUserInfo cursor = head;</span><br><span class="line">    <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">        showUser(cursor);</span><br><span class="line">        cursor = cursor-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n按回车键返回上级菜单...\n&quot;</span>);</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加用户选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createUserOption</span><span class="params">(pUserInfo* head)</span> </span>&#123;</span><br><span class="line">    pUserInfo user = (pUserInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(UserInfo));</span><br><span class="line">    <span class="built_in">memset</span>(user, <span class="number">0U</span>, <span class="keyword">sizeof</span>(UserInfo));</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #添加用户#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    editUser(user);</span><br><span class="line">    <span class="keyword">if</span> (findUserInfoNode(*head, user-&gt;id)) &#123;</span><br><span class="line">        <span class="built_in">free</span>(user);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n用户创建失败，存在相同用户！\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *head = addUserInfoNode(*head, user);</span><br><span class="line">        <span class="comment">/*同步文件信息*/</span></span><br><span class="line">        saveUserInfoFile(*head);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n用户创建成功！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改用户选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUserOption</span><span class="params">(pUserInfo head, pUserInfo me)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pUserInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #修改用户#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             账号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findUserInfoNode(head, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        showUser(target);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;┌-------------------------------------------------┐\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    账号：&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, target-&gt;id);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    姓名：&quot;</span>);</span><br><span class="line">        inputLine(target-&gt;name, <span class="keyword">sizeof</span>(target-&gt;name));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    密码：&quot;</span>);</span><br><span class="line">        inputPassword(target-&gt;password, <span class="keyword">sizeof</span>(target-&gt;password));</span><br><span class="line">        <span class="keyword">if</span> (target != me) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;    权限：（0：普通用户， 1：管理员）&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;target-&gt;rank);</span><br><span class="line">            <span class="keyword">if</span> (target-&gt;rank != NORMAL &amp;&amp; target-&gt;rank != MANAGER) &#123;</span><br><span class="line">                target-&gt;rank = NORMAL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;└-------------------------------------------------┘\n&quot;</span>);</span><br><span class="line">        <span class="comment">/*同步文件信息*/</span></span><br><span class="line">        saveUserInfoFile(head);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n用户修改成功！\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该用户！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除用户选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeUserOption</span><span class="params">(pUserInfo* head, pUserInfo me)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pUserInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #删除用户#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             账号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findUserInfoNode(*head, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == me) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n不允许删除自己！\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            showUser(target);</span><br><span class="line">            *head = removeUserInfoNode(*head, target);</span><br><span class="line">            <span class="comment">/*同步文件信息*/</span></span><br><span class="line">            saveUserInfoFile(*head);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n用户删除成功！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该用户！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*显示图书清单选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showBookListOption</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">        pBookInfo cursor = head;</span><br><span class="line">        <span class="keyword">int</span> page_current = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> page_total = countBookInfoNode(head);</span><br><span class="line">        page_total = ((page_total - <span class="number">1</span>) / SHOW_BOOK_PAGE_COUNT) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            clearScreen();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;               #图书清单#\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;               【%2d/%-2d】\n&quot;</span>, ++page_current, page_total);</span><br><span class="line">            <span class="keyword">while</span> (cursor) &#123;</span><br><span class="line">                showBook(cursor);</span><br><span class="line">                cursor = cursor-&gt;next;</span><br><span class="line">                <span class="keyword">if</span> (++count == SHOW_BOOK_PAGE_COUNT) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n【 1 下一页 | 0 返回上级菜单】\n&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> option;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">                <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n按回车键返回上级菜单...\n&quot;</span>);</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加图书选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBookOption</span><span class="params">(pBookInfo* head)</span> </span>&#123;</span><br><span class="line">    pBookInfo book = (pBookInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BookInfo));</span><br><span class="line">    <span class="built_in">memset</span>(book, <span class="number">0U</span>, <span class="keyword">sizeof</span>(BookInfo));</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #添加图书#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    editBook(book);</span><br><span class="line">    <span class="keyword">if</span> (findBookInfoNodeByID(*head, book-&gt;id)) &#123;</span><br><span class="line">        <span class="built_in">free</span>(book);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n图书添加失败，存在相同图书编号！\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *head = addBookInfoNode(*head, book);</span><br><span class="line">        <span class="comment">/*同步文件信息*/</span></span><br><span class="line">        saveBookInfoFile(*head);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n图书添加成功！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改图书选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBookOption</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #修改图书#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByID(head, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        showBook(target);</span><br><span class="line">        editBook(target);</span><br><span class="line">        <span class="comment">/*同步文件信息*/</span></span><br><span class="line">        saveBookInfoFile(head);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n图书修改成功！\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除图书选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeBookOption</span><span class="params">(pBookInfo* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #删除图书#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByID(*head, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        showBook(target);</span><br><span class="line">        *head = removeBookInfoNode(*head, target);</span><br><span class="line">        <span class="comment">/*同步文件信息*/</span></span><br><span class="line">        saveBookInfoFile(*head);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n图书删除成功！\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按编号查询图书选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">searchBookByIDOption</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #按编号查询#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByID(head, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        showBook(target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按书名查询图书选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">searchBookByNameOption</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #按书名查询#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             书名：&quot;</span>);</span><br><span class="line">    inputLine(name, <span class="keyword">sizeof</span>(name));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByName(head, name);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            showBook(target);</span><br><span class="line">            target = findBookInfoNodeByName(target-&gt;next, name);</span><br><span class="line">        &#125; <span class="keyword">while</span> (target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按作者查询图书选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">searchBookByAuthorOption</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #按作者查询#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             作者：&quot;</span>);</span><br><span class="line">    inputLine(author, <span class="keyword">sizeof</span>(author));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByAuthor(head, author);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            showBook(target);</span><br><span class="line">            target = findBookInfoNodeByAuthor(target-&gt;next, author);</span><br><span class="line">        &#125; <span class="keyword">while</span> (target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按出版社查询图书选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">searchBookByPressOption</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> press[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #按出版神查询#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             出版社：&quot;</span>);</span><br><span class="line">    inputLine(press, <span class="keyword">sizeof</span>(press));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByPress(head, press);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            showBook(target);</span><br><span class="line">            target = findBookInfoNodeByPress(target-&gt;next, press);</span><br><span class="line">        &#125; <span class="keyword">while</span> (target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加借书记录*/</span></span><br><span class="line"><span class="function">pRecordInfo <span class="title">addRecord</span><span class="params">(pRecordInfo* head, <span class="keyword">char</span>* user_id, <span class="keyword">char</span>* book_id)</span> </span>&#123;</span><br><span class="line">    pRecordInfo target = findRecordInfoNodeByID(*head, user_id);</span><br><span class="line">    <span class="keyword">if</span> (!target) &#123;</span><br><span class="line">        target = (pRecordInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RecordInfo));</span><br><span class="line">        <span class="built_in">memset</span>(target, <span class="number">0</span>, <span class="keyword">sizeof</span>(RecordInfo));</span><br><span class="line">        <span class="built_in">strcpy</span>(target-&gt;user_id, user_id);</span><br><span class="line">        *head = addRecordInfoNode(*head, target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target-&gt;count &lt; BORROW_COUNT_MAX) &#123;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; BORROW_COUNT_MAX; ++index) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strlen</span>(target-&gt;book_id[index]) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">strcpy</span>(target-&gt;book_id[index], book_id);</span><br><span class="line">                ++target-&gt;count;</span><br><span class="line">                saveRecordInfoFile(*head);</span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除借书记录*/</span></span><br><span class="line"><span class="function">pRecordInfo <span class="title">removeRecord</span><span class="params">(pRecordInfo* head, <span class="keyword">char</span>* user_id, <span class="keyword">char</span>* book_id)</span> </span>&#123;</span><br><span class="line">    pRecordInfo target = findRecordInfoNodeByID(*head, user_id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; BORROW_COUNT_MAX; ++index) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(target-&gt;book_id[index], book_id) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(target-&gt;book_id[index], <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">                --target-&gt;count;</span><br><span class="line">                <span class="keyword">if</span> (target-&gt;count == <span class="number">0</span>) &#123;</span><br><span class="line">                    *head = removeRecordInfoNode(*head, target);</span><br><span class="line">                &#125;</span><br><span class="line">                saveRecordInfoFile(*head);</span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*借书*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">borrowBookOption</span><span class="params">(pBookInfo bookhead, pRecordInfo* recordhead, pUserInfo me)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #借书#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByID(bookhead, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        showBook(target);</span><br><span class="line">        <span class="keyword">if</span> (target-&gt;stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addRecord(recordhead, me-&gt;id, target-&gt;id)) &#123;</span><br><span class="line">                <span class="comment">/*同步文件信息*/</span></span><br><span class="line">                --target-&gt;stock;</span><br><span class="line">                saveBookInfoFile(bookhead);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n操作成功！\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n您的借阅数量已达上限，请先归还图书！\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n没有库存！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*还书*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">returnBookOption</span><span class="params">(pBookInfo bookhead, pRecordInfo* recordhead, pUserInfo me)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pBookInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #还书#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    target = findBookInfoNodeByID(bookhead, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        showBook(target);</span><br><span class="line">        <span class="keyword">if</span> (removeRecord(recordhead, me-&gt;id, target-&gt;id)) &#123;</span><br><span class="line">            <span class="comment">/*同步文件信息*/</span></span><br><span class="line">            ++target-&gt;stock;</span><br><span class="line">            saveBookInfoFile(bookhead);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n操作成功！\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n您没有借阅该图书！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n未找到该图书！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*借阅清单*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showRecordOption</span><span class="params">(pBookInfo bookhead, pRecordInfo recordhead, pUserInfo me)</span> </span>&#123;</span><br><span class="line">    pRecordInfo target = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #借阅清单#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    target = findRecordInfoNodeByID(recordhead, me-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           %-10s%-10s\n&quot;</span>, <span class="string">&quot;编号&quot;</span>, <span class="string">&quot;书名&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; BORROW_COUNT_MAX; ++index) &#123;</span><br><span class="line">            <span class="keyword">char</span>* book_id = target-&gt;book_id[index];</span><br><span class="line">            pBookInfo book = findBookInfoNodeByID(bookhead, book_id);</span><br><span class="line">            <span class="keyword">if</span> (book) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;           %-10s%-10s\n&quot;</span>, book_id, book-&gt;name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用户设置选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settingUserOption</span><span class="params">(pUserInfo head, pUserInfo me)</span> </span>&#123;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #用户设置#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └------------------------┘\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;┌-------------------------------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    账号：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, me-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    姓名：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, me-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    密码：&quot;</span>);</span><br><span class="line">    inputPassword(me-&gt;password, <span class="keyword">sizeof</span>(me-&gt;password));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;└-------------------------------------------------┘\n&quot;</span>);</span><br><span class="line">    <span class="comment">/*同步文件信息*/</span></span><br><span class="line">    saveUserInfoFile(head);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n用户设置成功！\n&quot;</span>);</span><br><span class="line">    waitingPressAnyKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用户管理菜单*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manageUsersOption</span><span class="params">(pUserInfo* head, pUserInfo me)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> option;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        clearScreen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;                 #用户管理#\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【1】 用户清单\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【2】 添加用户\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【3】 修改用户\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【4】 删除用户\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【0】 返回\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        └-------------------------------┘\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            showUserListOption(*head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            createUserOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            updateUserOption(*head, me);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            removeUserOption(head, me);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图书浏览菜单*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">browseBooksOption</span><span class="params">(pBookInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> option;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        clearScreen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;                 #图书浏览#\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【1】 图书清单\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【2】 按编号查询\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【3】 按书名查询\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【4】 按作者查询\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【5】 按出版社查询\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【0】 返回\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        └-------------------------------┘\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            showBookListOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            searchBookByIDOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            searchBookByNameOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            searchBookByAuthorOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            searchBookByPressOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图书管理菜单*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manageBooksOption</span><span class="params">(pBookInfo* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> option;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        clearScreen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;                 #图书管理#\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【1】 添加图书\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【2】 修改图书\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【3】 删除图书\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【0】 返回\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        └-------------------------------┘\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            createBookOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            updateBookOption(*head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            removeBookOption(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*登录验证*/</span></span><br><span class="line"><span class="function">pUserInfo <span class="title">checkLogin</span><span class="params">(pUserInfo head, <span class="keyword">char</span>* id, <span class="keyword">char</span>* password)</span> </span>&#123;</span><br><span class="line">    pUserInfo target = findUserInfoNode(head, id);</span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(target-&gt;password, password) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*普通用户系统主菜单*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainNormalOption</span><span class="params">(pUserInfo* userhead, pUserInfo me, pBookInfo* bookhead, pRecordInfo* recordhead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> option;</span><br><span class="line">        clearScreen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;               #图书信息管理系统#\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【1】 浏览图书\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【2】 用户设置\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【3】 借书\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【4】 还书\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【5】 借阅清单\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【0】 退出系统\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;             账号：%s 姓名：%s 权限：%s\n&quot;</span>, me-&gt;id, me-&gt;name, <span class="string">&quot;普通用户&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        └-------------------------------┘\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            browseBooksOption(*bookhead);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            settingUserOption(*userhead, me);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            borrowBookOption(*bookhead, recordhead, me);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            returnBookOption(*bookhead, recordhead, me);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            showRecordOption(*bookhead, *recordhead, me);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*管理员系统主菜单*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainManagerOption</span><span class="params">(pUserInfo* userhead, pUserInfo me, pBookInfo* bookhead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> option;</span><br><span class="line">        clearScreen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;               #图书信息管理系统#\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【1】 浏览图书\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【2】 用户管理\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【3】 图书管理\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;              【0】 退出系统\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;             账号：%s 姓名：%s 权限：%s\n&quot;</span>, me-&gt;id, me-&gt;name, <span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        └-------------------------------┘\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            browseBooksOption(*bookhead);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            manageUsersOption(userhead, me);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            manageBooksOption(bookhead);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*首次登录，初始化管理员账号*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">firstLogin</span><span class="params">(pUserInfo* head)</span> </span>&#123;</span><br><span class="line">    pUserInfo user = (pUserInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(UserInfo));</span><br><span class="line">    <span class="built_in">memset</span>(user, <span class="number">0U</span>, <span class="keyword">sizeof</span>(UserInfo));</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               #图书信息管理系统#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           #首次使用，需创建管理员用户#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             账号 : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, user-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             姓名 : &quot;</span>);</span><br><span class="line">    inputLine(user-&gt;name, <span class="keyword">sizeof</span>(user-&gt;name));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             密码 : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, user-&gt;password);</span><br><span class="line">    user-&gt;rank = MANAGER;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └-------------------------------┘\n&quot;</span>);</span><br><span class="line">    *head = addUserInfoNode(*head, user);</span><br><span class="line">    saveUserInfoFile(*head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用户登录*/</span></span><br><span class="line"><span class="function">pUserInfo <span class="title">userLogin</span><span class="params">(pUserInfo head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> password[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    pUserInfo user = <span class="literal">NULL</span>;</span><br><span class="line">    clearScreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           #欢迎登录图书信息管理系统#\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             账号 : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             密码 : &quot;</span>);</span><br><span class="line">    inputPassword(password, <span class="keyword">sizeof</span>(password));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;        └-------------------------------┘\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> checkLogin(head, id, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进入系统*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(pUserInfo* userhead, pBookInfo* bookhead, pRecordInfo* recordhead)</span> </span>&#123;</span><br><span class="line">    pUserInfo me = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        me = userLogin(*userhead);</span><br><span class="line">        <span class="keyword">if</span> (!me) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n登录失败，账号或密码错误！\n&quot;</span>);</span><br><span class="line">            waitingPressAnyKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!me);</span><br><span class="line">    <span class="keyword">switch</span> (me-&gt;rank) &#123;</span><br><span class="line">    <span class="keyword">case</span> NORMAL:</span><br><span class="line">        mainNormalOption(userhead, me, bookhead, recordhead);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MANAGER:</span><br><span class="line">        mainManagerOption(userhead, me, bookhead);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*从文件中加载用户数据*/</span></span><br><span class="line">    pUserInfo userhead = loadUserInfoFile();</span><br><span class="line">    <span class="comment">/*从文件中加载图书数据*/</span></span><br><span class="line">    pBookInfo bookhead = loadBookInfoFile();</span><br><span class="line">    <span class="comment">/*从文件中加载记录数据*/</span></span><br><span class="line">    pRecordInfo recordhead = loadRecordInfoFile();</span><br><span class="line">    <span class="comment">/*首次登录，设置管理员用户*/</span></span><br><span class="line">    <span class="keyword">if</span> (!userhead) &#123;</span><br><span class="line">        firstLogin(&amp;userhead);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*进入系统*/</span></span><br><span class="line">    process(&amp;userhead, &amp;bookhead, &amp;recordhead);</span><br><span class="line">    <span class="comment">/*清理用户列表*/</span></span><br><span class="line">    clearUserInfoList(userhead);</span><br><span class="line">    <span class="comment">/*清理图书列表*/</span></span><br><span class="line">    clearBookInfoList(bookhead);</span><br><span class="line">    <span class="comment">/*清理记录列表*/</span></span><br><span class="line">    clearRecordInfoList(recordhead);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>下面是混淆后的代码，它跟上面的原始代码一样都能顺利编译，执行效果并无差别，但是已经不可阅读了</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">**************************************</span></span><br><span class="line"><span class="comment">*        # C/C++代码混淆器 #</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*          --- 狐狸の窝 ---</span></span><br><span class="line"><span class="comment">*  Copyright (C) https://foxzzz.com</span></span><br><span class="line"><span class="comment">**************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J27B printf(<span class="meta-string">&quot;             账号：%s 姓名：%s 权限：%s\n&quot;</span>, me-&gt;id, me-&gt;name, <span class="meta-string">&quot;普通用户&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J27A printf(<span class="meta-string">&quot;             账号：%s 姓名：%s 权限：%s\n&quot;</span>, me-&gt;id, me-&gt;name, <span class="meta-string">&quot;管理员&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J279 printf(<span class="meta-string">&quot;               【%2d/%-2d】\n&quot;</span>, ++page_current, page_total);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J278 printf(<span class="meta-string">&quot;\n您的借阅数量已达上限，请先归还图书！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J277 printf(<span class="meta-string">&quot;└-------------------------------------------------┘\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J276 printf(<span class="meta-string">&quot;┌-------------------------------------------------┐\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J275 printf(<span class="meta-string">&quot;           #首次使用，需创建管理员用户#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J274 printf(<span class="meta-string">&quot;\n图书添加失败，存在相同图书编号！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J273 printf(<span class="meta-string">&quot;    权限：（0：普通用户， 1：管理员）&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J272 printf(<span class="meta-string">&quot;           #欢迎登录图书信息管理系统#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J271 char user_id[128];                      <span class="comment">/*借阅人账号*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J270 struct _tRecordInfo* next;              <span class="comment">/*下一个节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J26F printf(<span class="meta-string">&quot;        ┌-------------------------------┐\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J26E printf(<span class="meta-string">&quot;        └-------------------------------┘\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J26D <span class="comment">/*将上一个节点指向删除节点的下一个节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J26C printf(<span class="meta-string">&quot;\n用户创建失败，存在相同用户！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J26B printf(<span class="meta-string">&quot;\n【 1 下一页 | 0 返回上级菜单】\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J26A char book_id[BORROW_COUNT_MAX][128];    <span class="comment">/*图书编号*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J269 int count;                              <span class="comment">/*借阅数量*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J268 printf(<span class="meta-string">&quot;           %-10s%-10s\n&quot;</span>, book_id, book-&gt;name);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J267 printf(<span class="meta-string">&quot;           %-10s%-10s\n&quot;</span>, <span class="meta-string">&quot;编号&quot;</span>, <span class="meta-string">&quot;书名&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J266 printf(<span class="meta-string">&quot;\n登录失败，账号或密码错误！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J265 printf(<span class="meta-string">&quot;               #图书信息管理系统#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J264 printf(<span class="meta-string">&quot;              【5】 按出版社查询\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J263 <span class="comment">/*添加图书节点，返回链表首节点指针*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J262 <span class="comment">/*添加记录节点，返回链表首节点指针*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J261 <span class="comment">/*删除用户节点，返回链表首节点指针*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J260 <span class="comment">/*删除图书节点，返回链表首节点指针*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J25F <span class="comment">/*添加用户节点，返回链表首节点指针*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J25E <span class="comment">/*删除记录节点，返回链表首节点指针*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J25D printf(<span class="meta-string">&quot;        └------------------------┘\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J25C printf(<span class="meta-string">&quot;        ┌------------------------┐\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J25B printf(<span class="meta-string">&quot;              【4】 按作者查询\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J25A printf(<span class="meta-string">&quot;              【2】 按编号查询\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J259 printf(<span class="meta-string">&quot;              【3】 按书名查询\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J258 <span class="comment">/*将用户节点总数写入文件起始位置*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J257 printf(<span class="meta-string">&quot;               #按出版神查询#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J256 printf(<span class="meta-string">&quot;\n按回车键返回上级菜单...\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J255 printf(<span class="meta-string">&quot;              【1】 添加图书\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J254 printf(<span class="meta-string">&quot;              【1】 用户清单\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J253 printf(<span class="meta-string">&quot;              【2】 修改图书\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J252 struct _tUserInfo* next;    <span class="comment">/*下一个节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J251 <span class="comment">/*将指向下个节点的指针重置成NULL*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J250 struct _tBookInfo* next;    <span class="comment">/*下一个节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J24F printf(<span class="meta-string">&quot;              【1】 浏览图书\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J24E printf(<span class="meta-string">&quot;              【4】 删除用户\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J24D printf(<span class="meta-string">&quot;              【2】 用户管理\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J24C printf(<span class="meta-string">&quot;              【2】 添加用户\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J24B printf(<span class="meta-string">&quot;              【5】 借阅清单\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J24A printf(<span class="meta-string">&quot;              【3】 图书管理\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J249 printf(<span class="meta-string">&quot;              【2】 用户设置\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J248 printf(<span class="meta-string">&quot;              【3】 删除图书\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J247 printf(<span class="meta-string">&quot;              【1】 图书清单\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J246 printf(<span class="meta-string">&quot;              【3】 修改用户\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J245 printf(<span class="meta-string">&quot;              【0】 退出系统\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J244 printf(<span class="meta-string">&quot;               #按编号查询#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J243 printf(<span class="meta-string">&quot;               #按书名查询#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J242 printf(<span class="meta-string">&quot;               #按作者查询#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J241 char time[256];             <span class="comment">/*出版时间*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J240 printf(<span class="meta-string">&quot;                 #图书管理#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J23F printf(<span class="meta-string">&quot;                 #用户管理#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J23E printf(<span class="meta-string">&quot;                 #图书浏览#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J23D while ((c = getchar()) != <span class="meta-string">&#x27;\n&#x27;</span> &amp;&amp; c != EOF);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J23C printf(<span class="meta-string">&quot;    权限：%s\n&quot;</span>, <span class="meta-string">&quot;普通用户&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J23B printf(<span class="meta-string">&quot;    密码：%s\n&quot;</span>, user-&gt;password);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J23A <span class="comment">/*读取文件起始位置的节点总数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J239 <span class="comment">/*找到要删除节点的上一个节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J238 FILE* file = fopen(<span class="meta-string">&quot;recordinfo.dat&quot;</span>, <span class="meta-string">&quot;wb&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J237 FILE* file = fopen(<span class="meta-string">&quot;recordinfo.dat&quot;</span>, <span class="meta-string">&quot;rb&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J236 <span class="comment">/*首次登录，初始化管理员账号*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J235 printf(<span class="meta-string">&quot;               #删除用户#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J234 printf(<span class="meta-string">&quot;               #修改用户#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J233 printf(<span class="meta-string">&quot;               #删除图书#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J232 printf(<span class="meta-string">&quot;               #借阅清单#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J231 printf(<span class="meta-string">&quot;               #图书清单#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J230 printf(<span class="meta-string">&quot;               #用户设置#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J22F printf(<span class="meta-string">&quot;               #添加用户#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J22E printf(<span class="meta-string">&quot;               #修改图书#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J22D printf(<span class="meta-string">&quot;\n您没有借阅该图书！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J22C printf(<span class="meta-string">&quot;               #添加图书#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J22B FILE* file = fopen(<span class="meta-string">&quot;userinfo.dat&quot;</span>, <span class="meta-string">&quot;wb&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J22A FILE* file = fopen(<span class="meta-string">&quot;bookinfo.dat&quot;</span>, <span class="meta-string">&quot;wb&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J229 char press[256];            <span class="comment">/*出版社*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J228 printf(<span class="meta-string">&quot;              【3】 借书\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J227 printf(<span class="meta-string">&quot;              【4】 还书\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J226 printf(<span class="meta-string">&quot;              【0】 返回\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J225 FILE* file = fopen(<span class="meta-string">&quot;userinfo.dat&quot;</span>, <span class="meta-string">&quot;rb&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J224 FILE* file = fopen(<span class="meta-string">&quot;bookinfo.dat&quot;</span>, <span class="meta-string">&quot;rb&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J223 printf(<span class="meta-string">&quot;    权限：%s\n&quot;</span>, <span class="meta-string">&quot;管理员&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J222 <span class="comment">/*首次登录，设置管理员用户*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J221 (pRecordInfo)malloc(sizeof(RecordInfo));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J220 printf(<span class="meta-string">&quot;    姓名：%s\n&quot;</span>, user-&gt;name);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J21F printf(<span class="meta-string">&quot;\n不允许删除自己！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J21E char type[256];             <span class="comment">/*类型*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J21D char id[128];               <span class="comment">/*编号*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J21C char name[256];             <span class="comment">/*书名*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J21B char name[256];             <span class="comment">/*姓名*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J21A char id[128];               <span class="comment">/*账号*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J219 char author[256];           <span class="comment">/*作者*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J218 findBookInfoNodeByAuthor(target-&gt;next,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J217 int rank;                   <span class="comment">/*权限*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J216 char password[256];         <span class="comment">/*密码*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J215 printf(<span class="meta-string">&quot;    账号：%s\n&quot;</span>, user-&gt;id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J214 double price;               <span class="comment">/*价格*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J213 int stock;                  <span class="comment">/*库存*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J212 <span class="comment">/*通过出版社查找图书节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J211 findBookInfoNodeByPress(target-&gt;next,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J210 <span class="comment">/*清理图书列表，回收内存*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J20F <span class="comment">/*清理用户列表，回收内存*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J20E <span class="comment">/*将新节点插入到链表尾部*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J20D <span class="comment">/*清理记录列表，回收内存*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J20C printf(<span class="meta-string">&quot;\n图书修改成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J20B findBookInfoNodeByName(target-&gt;next,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J20A printf(<span class="meta-string">&quot;\n图书添加成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J209 printf(<span class="meta-string">&quot;\n未找到该图书！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J208 printf(<span class="meta-string">&quot;\n图书删除成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J207 printf(<span class="meta-string">&quot;\n用户设置成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J206 printf(<span class="meta-string">&quot;             出版社：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J205 printf(<span class="meta-string">&quot;\n用户删除成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J204 (pUserInfo)malloc(sizeof(UserInfo));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J203 printf(<span class="meta-string">&quot;\n用户创建成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J202 (pBookInfo)malloc(sizeof(BookInfo));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J201 printf(<span class="meta-string">&quot;               #借书#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J200 printf(<span class="meta-string">&quot;\n未找到该用户！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1FF printf(<span class="meta-string">&quot;               #还书#\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1FE printf(<span class="meta-string">&quot;\n用户修改成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1FD <span class="comment">/*从文件中加载图书数据*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1FC findBookInfoNodeByAuthor(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1FB searchBookByAuthorOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1FA findRecordInfoNodeByID(recordhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F9 <span class="comment">/*从文件中加载用户信息*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F8 <span class="comment">/*从文件中加载记录数据*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F7 <span class="comment">/*从文件中加载用户数据*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F6 <span class="comment">/*通过账号查找记录节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F5 <span class="comment">/*从文件中加载记录信息*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F4 <span class="comment">/*通过书名查找图书节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F3 <span class="comment">/*通过作者查找图书节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F2 <span class="comment">/*通过账号查找用户节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F1 <span class="comment">/*通过账号查找图书节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F0 <span class="comment">/*按出版社查询图书选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1EF findRecordInfoNodeByID(pRecordInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1EE <span class="comment">/*将记录信息存储到文件*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1ED <span class="comment">/*将用户信息存储到文件*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1EC <span class="comment">/*将图书信息存储到文件*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1EB printf(<span class="meta-string">&quot;             编号：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1EA searchBookByPressOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E9 printf(<span class="meta-string">&quot;             密码 : &quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E8 printf(<span class="meta-string">&quot;             作者：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E7 printf(<span class="meta-string">&quot;             书名：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E6 printf(<span class="meta-string">&quot;             姓名 : &quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E5 findBookInfoNodeByPress(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E4 printf(<span class="meta-string">&quot;             账号：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E3 printf(<span class="meta-string">&quot;             账号 : &quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E2 searchBookByNameOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E1 clearRecordInfoList(recordhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E0 findBookInfoNodeByName(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1DF removeRecordInfoNode(pRecordInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1DE searchBookByAuthorOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1DD (strlen(target-&gt;book_id[index])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1DC <span class="comment">/*按书名查询图书选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1DB (strcmp(target-&gt;book_id[index],</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1DA <span class="comment">/*按编号查询图书选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D9 clearRecordInfoList(pRecordInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D8 printf(<span class="meta-string">&quot;%.2lf\n&quot;</span>, book-&gt;price);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D7 <span class="comment">/*普通用户系统主菜单*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D6 <span class="comment">/*从标准输入一行文本*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D5 inputPassword(target-&gt;password,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D4 <span class="meta-keyword">if</span> (ch == <span class="meta-string">&#x27;\n&#x27;</span> || ch == <span class="meta-string">&#x27;\r&#x27;</span>) &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D3 <span class="comment">/*链表为空返回该节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D2 countRecordInfoNode(pRecordInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D1 <span class="comment">/*按作者查询图书选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D0 printf(<span class="meta-string">&quot;读文件失败！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1CF printf(<span class="meta-string">&quot;写文件失败！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1CE findBookInfoNodeByID(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1CD searchBookByPressOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1CC findBookInfoNodeByAuthor(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1CB printf(<span class="meta-string">&quot;\n操作成功！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1CA printf(<span class="meta-string">&quot;\n没有库存！\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C9 findBookInfoNodeByID(bookhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C8 memset(target-&gt;book_id[index],</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C7 printf(<span class="meta-string">&quot;    出版时间：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C6 strcpy(target-&gt;book_id[index],</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C5 searchBookByIDOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C4 findBookInfoNodeByPress(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C3 addRecordInfoNode(pRecordInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C2 printf(<span class="meta-string">&quot;%s\n&quot;</span>, book-&gt;author);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C1 inputPassword(user-&gt;password,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C0 findRecordInfoNodeByID(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1BF browseBooksOption(*bookhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1BE searchBookByNameOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1BD settingUserOption(*userhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1BC <span class="comment">/*删除节点为首节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1BB scanf(<span class="meta-string">&quot;%s&quot;</span>, user-&gt;password);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1BA removeUserInfoNode(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B9 removeBookInfoNode(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B8 showBookListOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B7 <span class="comment">/*管理员系统主菜单*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B6 manageBooksOption(bookhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B5 manageBooksOption(pBookInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B4 <span class="comment">/*显示图书清单选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B3 (findBookInfoNodeByID(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B2 mainManagerOption(pUserInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B1 printf(<span class="meta-string">&quot;%s\n&quot;</span>, book-&gt;press);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B0 printf(<span class="meta-string">&quot;%d\n&quot;</span>, book-&gt;stock);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1AF clearBookInfoList(bookhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1AE findBookInfoNodeByName(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1AD manageUsersOption(pUserInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1AC NORMAL,     <span class="comment">/*普通用户*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1AB clearUserInfoList(userhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1AA <span class="comment">/*显示用户清单选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A9 showUserListOption(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A8 printf(<span class="meta-string">&quot;    出版社：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A7 printf(<span class="meta-string">&quot;%s\n&quot;</span>, book-&gt;name);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A6 printf(<span class="meta-string">&quot;%s\n&quot;</span>, book-&gt;time);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A5 printf(<span class="meta-string">&quot;%s\n&quot;</span>, target-&gt;id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A4 removeBookOption(pBookInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A3 removeRecordInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A2 removeUserOption(pUserInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A1 returnBookOption(*bookhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A0 saveBookInfoFile(bookhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J19F scanf(<span class="meta-string">&quot;%d&quot;</span>, &amp;target-&gt;rank);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J19E scanf(<span class="meta-string">&quot;%lf&quot;</span>, &amp;book-&gt;price);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J19D searchBookByIDOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J19C settingUserOption(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J19B showRecordOption(*bookhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J19A borrowBookOption(*bookhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J199 browseBooksOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J198 clearBookInfoList(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J197 clearUserInfoList(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J196 countBookInfoNode(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J195 countUserInfoNode(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J194 createBookOption(pBookInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J193 createUserOption(pUserInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J192 findBookInfoNodeByID(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J191 printf(<span class="meta-string">&quot;%s\n&quot;</span>, book-&gt;type);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J190 inputPassword(me-&gt;password,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J18F mainManagerOption(userhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J18E mainNormalOption(pUserInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J18D manageUsersOption(userhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J18C findBookInfoNodeByID(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J18B sizeof(target-&gt;password));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J18A mainNormalOption(userhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J189 showUserListOption(*head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J188 countRecordInfoNode(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J187 findUserInfoNode(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J186 removeRecordInfoNode(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J185 returnBookOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J184 borrowBookOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J183 updateUserOption(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J182 showRecordOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J181 saveRecordInfoFile(*head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J180 scanf(<span class="meta-string">&quot;%d&quot;</span>, &amp;book-&gt;stock);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J17F updateBookOption(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J17E (strcmp(target-&gt;password,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J17D MANAGER     <span class="comment">/*管理员*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J17C showBookListOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J17B <span class="comment">/*等待按下任意键*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J17A <span class="comment">/*借阅记录结构体*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J179 <span class="comment">/*清空输入缓冲区*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J178 removeBookInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J177 (removeRecord(recordhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J176 printf(<span class="meta-string">&quot;%s\n&quot;</span>, me-&gt;name);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J175 addBookInfoNode(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J174 removeRecord(pRecordInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J173 addUserInfoNode(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J172 removeUserInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J171 printf(<span class="meta-string">&quot;%s\n&quot;</span>, book-&gt;id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J170 <span class="comment">/*计算记录节点数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J16F <span class="comment">/*计算用户节点数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J16E <span class="comment">/*计算图书节点数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J16D scanf(<span class="meta-string">&quot;%d&quot;</span>, &amp;user-&gt;rank);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J16C countBookInfoNode(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J16B scanf(<span class="meta-string">&quot;%s&quot;</span>, book-&gt;time);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J16A saveUserInfoFile(*head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J169 addRecordInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J168 saveRecordInfoFile(const</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J167 scanf(<span class="meta-string">&quot;%s&quot;</span>, book-&gt;type);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J166 printf(<span class="meta-string">&quot;    价格：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J165 removeUserInfoNode(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J164 removeBookInfoNode(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J163 saveBookInfoFile(*head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J162 printf(<span class="meta-string">&quot;    账号：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J161 (findUserInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J160 (strcmp(cursor-&gt;user_id,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J15F printf(<span class="meta-string">&quot;    编号：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J15E printf(<span class="meta-string">&quot;    类型：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J15D printf(<span class="meta-string">&quot;    库存：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J15C printf(<span class="meta-string">&quot;    密码：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J15B printf(<span class="meta-string">&quot;    书名：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J15A updateBookOption(*head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J159 printf(<span class="meta-string">&quot;    姓名：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J158 sizeof(user-&gt;password));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J157 countUserInfoNode(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J156 printf(<span class="meta-string">&quot;    作者：&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J155 inputLine(book-&gt;author,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J154 updateUserOption(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J153 strcpy(target-&gt;user_id,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J152 addRecordInfoNode(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J151 target-&gt;book_id[index];</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J150 inputPassword(password,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J14F saveUserInfoFile(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J14E (strcmp(cursor-&gt;author,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J14D saveBookInfoFile(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J14C createUserOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J14B inputLine(target-&gt;name,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J14A createBookOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J149 removeBookOption(head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J148 printf(<span class="meta-string">&quot;%s\n&quot;</span>, me-&gt;id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J147 password[index] = <span class="meta-string">&#x27;\0&#x27;</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J146 findUserInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J145 <span class="comment">/*用户管理菜单*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J144 <span class="comment">/*显示图书信息*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J143 <span class="comment">/*显示用户信息*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J142 <span class="comment">/*添加借书记录*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J141 <span class="comment">/*添加图书选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J140 sizeof(me-&gt;password));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J13F sizeof(book-&gt;author));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J13E <span class="comment">/*编辑图书信息*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J13D scanf(<span class="meta-string">&quot;%s&quot;</span>, user-&gt;id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J13C <span class="comment">/*编辑用户信息*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J13B <span class="comment">/*修改用户选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J13A scanf(<span class="meta-string">&quot;%s&quot;</span>, book-&gt;id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J139 addBookInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J138 (strcmp(cursor-&gt;press,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J137 <span class="comment">/*清理记录列表*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J136 <span class="comment">/*添加用户选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J135 saveUserInfoFile(const</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J134 sizeof(target-&gt;name));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J133 <span class="comment">/*用户设置选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J132 addRecord(pRecordInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J131 addUserInfoNode(*head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J130 saveBookInfoFile(const</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J12F firstLogin(&amp;userhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J12E <span class="comment">/*清理用户列表*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J12D findUserInfoNode(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J12C removeUserOption(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J12B (addRecord(recordhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J12A <span class="comment">/*删除借书记录*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J129 inputLine(book-&gt;press,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J128 <span class="comment">/*清理图书列表*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J127 <span class="comment">/*修改图书选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J126 <span class="comment">/*同步文件信息*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J125 <span class="comment">/*图书浏览菜单*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J124 <span class="comment">/*删除图书选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J123 <span class="comment">/*图书管理菜单*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J122 <span class="comment">/*删除用户选项*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J121 loadRecordInfoFile();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J120 scanf(<span class="meta-string">&quot;%d&quot;</span>, &amp;option);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J11F addUserInfoNode(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J11E inputLine(book-&gt;name,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J11D (strcmp(cursor-&gt;name,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J11C userLogin(*userhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J11B inputLine(user-&gt;name,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J11A waitingPressAnyKey();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J119 addBookInfoNode(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J118 sizeof(book-&gt;press));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J117 firstLogin(pUserInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J116 <span class="meta-keyword">line</span>[len - 1] = <span class="meta-string">&#x27;\0&#x27;</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J115 SHOW_BOOK_PAGE_COUNT)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J114 checkLogin(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J113 sizeof(book-&gt;name));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J112 sizeof(RecordInfo));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J111 loadRecordInfoFile()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J110 sizeof(user-&gt;name));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J10F waitingPressAnyKey()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J10E inputPassword(char*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J10D <span class="comment">/*图书结构体*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J10C <span class="comment">/*用户结构体*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J10B loadBookInfoFile();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J10A sizeof(RecordInfo),</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J109 userLogin(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J108 loadUserInfoFile();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J107 <span class="comment">/*删除该节点*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J106 (strcmp(cursor-&gt;id,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J105 editBook(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J104 editUser(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J103 sizeof(password));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J102 sizeof(UserInfo));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J101 sizeof(BookInfo));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J100 loadBookInfoFile()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JFF loadUserInfoFile()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JFE showUser(pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JFD (strlen(book-&gt;id))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JFC process(pUserInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JFB process(&amp;userhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JFA showBook(pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF9 editBook(target);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF8 showUser(cursor);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF7 sizeof(UserInfo),</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF6 password[index++]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF5 BORROW_COUNT_MAX)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF4 sizeof(BookInfo),</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF3 showBook(target);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF2 showBook(cursor);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF1 BORROW_COUNT_MAX;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF0 inputLine(author,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JEF showUser(target);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JEE <span class="meta-keyword">if</span> (ch == <span class="meta-string">&#x27;\b&#x27;</span>) &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JED <span class="comment">/*匹配图书*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JEC <span class="comment">/*匹配用户*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JEB <span class="comment">/*用户权限*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JEA <span class="comment">/*用户登录*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE9 <span class="comment">/*登录验证*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE8 <span class="comment">/*输入密码*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE7 <span class="comment">/*进入系统*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE6 checkLogin(head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE5 inputLine(press,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE4 scanf(<span class="meta-string">&quot;%s&quot;</span>, id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE3 sizeof(author));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE2 ++target-&gt;count;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE1 ++target-&gt;stock;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE0 --target-&gt;count;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JDF --target-&gt;stock;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JDE <span class="comment">/*借阅清单*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JDD editBook(book);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JDC sizeof(press));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JDB inputLine(name,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JDA editUser(user);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD9 inputLine(char*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD8 putchar(<span class="meta-string">&#x27;\b&#x27;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD7 sizeof(name));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD6 memset(target,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD5 fwrite(&amp;count,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD4 fwrite(cursor,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD3 putchar(<span class="meta-string">&#x27;\n&#x27;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD2 clearScreen();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD1 (cursor-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD0 (target-&gt;stock</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JCF (target-&gt;count</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JCE system(<span class="meta-string">&quot;cls&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JCD &amp;recordhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JCC clearScreen()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JCB (cursor-&gt;next</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JCA putchar(<span class="meta-string">&#x27; &#x27;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC9 emptyStdin();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC8 putchar(<span class="meta-string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC7 fclose(file);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC6 (target-&gt;rank</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC5 printf(<span class="meta-string">&quot;\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC4 password[128]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC3 cursor-&gt;next;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC2 fread(&amp;count,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC1 strlen(<span class="meta-keyword">line</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC0 memset(user,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JBF page_current</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JBE memset(book,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JBD _tRecordInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JBC target-&gt;id))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JBB ((page_total</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JBA sizeof(int),</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB9 target-&gt;rank</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB8 emptyStdin()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB7 *recordhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB6 (user-&gt;rank)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB5 (fgets(<span class="meta-keyword">line</span>,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB4 cursor-&gt;next</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB3 recordhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB2 pRecordInfo;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB1 pRecordInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB0 recordhead)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JAF (user-&gt;rank</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JAE recordhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JAD author[128]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JAC (!userhead)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JAB RecordInfo,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JAA pRecordInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA9 node-&gt;next;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA8 fread(book,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA7 fread(user,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA6 free(book);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA5 free(node);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA4 free(user);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA3 bookhead);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA2 pBookInfo*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA1 (me-&gt;rank)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA0 page_total</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J9F &amp;bookhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J9E press[128]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J9D <span class="comment">/*还书*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J9C pUserInfo;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J9B book-&gt;id))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J9A <span class="comment">/*借书*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J99 <span class="comment">/*清屏*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J98 getchar();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J97 user-&gt;rank</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J96 user-&gt;next</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J95 user-&gt;id))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J94 _tUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J93 _tBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J92 book-&gt;next</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J91 password);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J90 recordhead</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J8F pBookInfo;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J8E continue;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J8D (count--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J8C (!target)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J8B password,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J8A BookInfo,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J89 (target);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J88 capacity,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J87 capacity)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J86 _getch();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J85 UserInfo,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J84 password)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J83 bookhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J82 pBookInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J81 pUserInfo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J80 bookhead)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J7F book_id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J7E user_id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J7D userhead,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J7C name[128]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J7B bookhead</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J7A MANAGER;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J79 ++index)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J78 (target)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J77 (option)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J76 UserRank</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J75 me-&gt;id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J74 target);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J73 author);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J72 ++count;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J71 (cursor)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J70 MANAGER:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J6F (++count</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J6E MANAGER)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J6D user_id,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J6C userhead</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J6B book_id)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J6A --index;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J69 return;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J68 option;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J67 typedef</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J66 me-&gt;id,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J65 id[128]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J64 press);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J63 stdin))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J62 NORMAL:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J61 target;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J60 NORMAL;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J5F book_id</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J5E (target</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J5D cursor;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J5C author)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J5B size_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J5A return</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J59 (!me);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J58 press)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J57 (book)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J56 (file)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J55 user);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J54 target</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J53 file);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J52 head);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J51 index;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J50 book);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J4F cursor</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J4E main()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J4D (head)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J4C NORMAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J4B (index</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J4A count;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J49 switch</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J48 struct</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J47 name);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J46 break;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J45 node)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J44 head)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J43 index</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J42 head,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J41 <span class="meta-keyword">line</span>,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J40 head;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J3F char*</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J3E count</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J3D book)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J3C name)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J3B 128);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J3A node;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J39 (head</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J38 *head</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J37 (!me)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J36 user)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J35 NULL;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J34 while</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J33 id);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J32 user</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J31 head</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J30 me);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F case</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E enum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B void</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A (len</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J29 book</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J28 me,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J27 for</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J26 0U,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J25 id)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J24 int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J23 me)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J22 id,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J21 (1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J20 ch;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1F len</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1E 3:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1D 1:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1C 2:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1B do</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1A <span class="meta-keyword">if</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J19 me</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J18 ch</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J17 &amp;&amp;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J16 1,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J15 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J14 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J13 ==</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J12 0,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J11 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J10 c;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JF !=</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JE 0:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JD 5:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JC 4:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JB 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JA &#125;;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J9 /</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J8 &lt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J7 +</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J6 -</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J5 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J4 *</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J3 &gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2 &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J1 &#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J0 =</span></span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">* 图书信息管理系统</span></span><br><span class="line"><span class="comment">* Copyright (C) i@foxzzz.com</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* C语言实现的命令行模式下的信息管理系统。</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BORROW_COUNT_MAX 10     <span class="comment">/*最多可借阅的图书数量*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHOW_BOOK_PAGE_COUNT 20 <span class="comment">/*一页显示的图书条目*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J27C JEB J2E J76 J2 J1AC J17D JA J10C J67 J48</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J27D J94 J2 J21A J21B J216 J217 J252 J1 J85 J4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J27E J9C J10D J67 J48 J93 J2 J21D J21C J219 J229</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J27F J21E J241 J214 J213 J250 J1 J8A J4 J8F J17A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J280 J67 J48 JBD J2 J271 J26A J269 J270 J1 JAB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J281 J4 JB2 J179 J2B JB8 J2 J24 J10 J23D J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J282 J17B J2B J10F J2 JC9 J98 J1 J99 J2B JCC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J283 J2 JCE J1 J1D6 J2B JD9 J41 J24 J87 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J284 J34 J21 J2 J1A JB5 J88 J63 J2 J5B J1F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J285 J0 JC1 J1A J2A J3 J15 J2 J116 J46 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J286 J1 J1 J1 JE8 J2B J10E J8B J24 J87 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J287 J24 J43 J0 JB J34 J4B J8 J87 J2 J24</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J288 J18 J0 J86 J1D4 J1A J4B J3 J11 J2 J147</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J289 JD3 J46 J1 J2D J8E J1 JEE J1A J4B J3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J28A J11 J2 J6A JD8 JCA JD8 J1 J1 J2D J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J28B JF6 J0 J20 JC8 J1 J1 J1 J25F J81 J173</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J28C J42 J81 J45 J2 J1A J4D J2 J81 J4F J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J28D J40 J34 JD1 J2 J4F J0 JC3 J1 J20E JB4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J28E J0 J3A J5A J40 J1 J2D J2 J1D3 J5A J3A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J28F J1 J1 J261 J81 J1BA J42 J81 J45 J2 J1A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J290 J4D J2 J1A J39 J13 J45 J2 J1BC J31 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J291 JA9 J107 JA5 J1 J2D J2 J81 J4F J0 J40</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J292 J34 JD1 J2 J239 J1A JCB J13 J45 J2 J26D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J293 JB4 J0 JA9 J107 JA5 J46 J1 J4F J0 JC3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J294 J1 J1 J1 J5A J40 J1 J1F2 J81 J187 J42</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J295 J3F J25 J2 J81 J4F J0 J40 J34 J71 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J296 JEC J1A J106 J25 J13 J11 J2 J5A J5D J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J297 J4F J0 JC3 J1 J5A J35 J1 J16F J24 J195</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J298 J44 J2 J81 J4F J0 J40 J24 J3E J0 JB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J299 J34 J71 J2 J72 J4F J0 JC3 J1 J5A J4A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J29A J1 J263 J82 J175 J42 J82 J45 J2 J1A J4D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J29B J2 J82 J4F J0 J40 J34 JD1 J2 J4F J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J29C JC3 J1 J20E JB4 J0 J3A J5A J40 J1 J2D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J29D J2 J1D3 J5A J3A J1 J1 J260 J82 J1B9 J42</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J29E J82 J45 J2 J1A J4D J2 J1A J39 J13 J45</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J29F J2 J1BC J31 J0 JA9 J107 JA5 J1 J2D J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A0 J82 J4F J0 J40 J34 JD1 J2 J239 J1A JCB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A1 J13 J45 J2 J26D JB4 J0 JA9 J107 JA5 J46</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A2 J1 J4F J0 JC3 J1 J1 J1 J5A J40 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A3 J1F1 J82 J1CE J42 J3F J25 J2 J82 J4F J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A4 J40 J34 J71 J2 JED J1A J106 J25 J13 J11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A5 J2 J5A J5D J1 J4F J0 JC3 J1 J5A J35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A6 J1 J1F4 J82 J1E0 J42 J3F J3C J2 J82 J4F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A7 J0 J40 J34 J71 J2 JED J1A J11D J3C J13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A8 J11 J2 J5A J5D J1 J4F J0 JC3 J1 J5A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2A9 J35 J1 J1F3 J82 J1FC J42 J3F J5C J2 J82</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2AA J4F J0 J40 J34 J71 J2 JED J1A J14E J5C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2AB J13 J11 J2 J5A J5D J1 J4F J0 JC3 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2AC J5A J35 J1 J212 J82 J1E5 J42 J3F J58 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2AD J82 J4F J0 J40 J34 J71 J2 JED J1A J138</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2AE J58 J13 J11 J2 J5A J5D J1 J4F J0 JC3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2AF J1 J5A J35 J1 J16E J24 J196 J44 J2 J82</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B0 J4F J0 J40 J24 J3E J0 JB J34 J71 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B1 J72 J4F J0 JC3 J1 J5A J4A J1 J262 JAA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B2 J1C3 J42 JAA J45 J2 J1A J4D J2 JAA J4F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B3 J0 J40 J34 JD1 J2 J4F J0 JC3 J1 J20E</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B4 JB4 J0 J3A J5A J40 J1 J2D J2 J1D3 J5A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B5 J3A J1 J1 J25E JAA J1DF J42 JAA J45 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B6 J1A J4D J2 J1A J39 J13 J45 J2 J1BC J31</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B7 J0 JA9 J107 JA5 J1 J2D J2 JAA J4F J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B8 J40 J34 JD1 J2 J239 J1A JCB J13 J45 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2B9 J26D JB4 J0 JA9 J107 JA5 J46 J1 J4F J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2BA JC3 J1 J1 J1 J5A J40 J1 J1F6 JAA J1EF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2BB J42 J3F J25 J2 JAA J4F J0 J40 J34 J71</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2BC J2 JEC J1A J160 J25 J13 J11 J2 J5A J5D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2BD J1 J4F J0 JC3 J1 J5A J35 J1 J170 J24</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2BE J1D2 J44 J2 JAA J4F J0 J40 J24 J3E J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2BF JB J34 J71 J2 J72 J4F J0 JC3 J1 J5A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C0 J4A J1 J1ED J2B J135 J81 J44 J2 J81 J4F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C1 J0 J40 J22B J1A J56 J2 J24 J3E J0 J157</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C2 J258 JD5 JBA J16 J53 J34 J71 J2 JD4 JF7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C3 J16 J53 J4F J0 JC3 J1 JC7 J1 J2D J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C4 J1CF J1 J1 J1F9 J81 JFF J2 J81 J31 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C5 J35 J225 J1A J56 J2 J24 J3E J0 JB J23A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C6 JC2 JBA J16 J53 J34 J8D J2 J81 J32 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C7 J204 JC0 J12 J102 JA7 JF7 J16 J53 J251 J96</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C8 J0 J35 J31 J0 J11F J55 J1 JC7 J1 J2D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2C9 J2 J1D0 J1 J5A J40 J1 J20F J2B J197 J44</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2CA J2 J34 J4D J2 J31 J0 J165 J52 J1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2CB J1EC J2B J130 J82 J44 J2 J82 J4F J0 J40</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2CC J22A J1A J56 J2 J24 J3E J0 J16C J258 JD5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2CD JBA J16 J53 J34 J71 J2 JD4 JF4 J16 J53</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2CE J4F J0 JC3 J1 JC7 J1 J2D J2 J1CF J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2CF J1 J1F9 J82 J100 J2 J82 J31 J0 J35 J224</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D0 J1A J56 J2 J24 J3E J0 JB J23A JC2 JBA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D1 J16 J53 J34 J8D J2 J82 J29 J0 J202 JBE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D2 J12 J101 JA8 JF4 J16 J53 J251 J92 J0 J35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D3 J31 J0 J119 J50 J1 JC7 J1 J2D J2 J1D0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D4 J1 J5A J40 J1 J210 J2B J198 J44 J2 J34</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D5 J4D J2 J31 J0 J164 J52 J1 J1 J1EE J2B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D6 J168 JAA J44 J2 JAA J4F J0 J40 J238 J1A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D7 J56 J2 J24 J3E J0 J188 J258 JD5 JBA J16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D8 J53 J34 J71 J2 JD4 J10A J16 J53 J4F J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2D9 JC3 J1 JC7 J1 J2D J2 J1CF J1 J1 J1F5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2DA JAA J111 J2 JAA J31 J0 J35 J237 J1A J56</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2DB J2 J24 J3E J0 JB J23A JC2 JBA J16 J53</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2DC J34 J8D J2 JAA J29 J0 J221 JBE J12 J112</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2DD JA8 J10A J16 J53 J251 J92 J0 J35 J31 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2DE J152 J50 J1 JC7 J1 J2D J2 J1D0 J1 J5A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2DF J40 J1 J20D J2B J1D9 J44 J2 J34 J4D J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E0 J31 J0 J186 J52 J1 J1 J143 J2B JFE J36</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E1 J2 J276 J215 J220 J23B J49 JB6 J2 J2F J62</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E2 J23C J46 J2F J70 J223 J46 J1 J277 J1 J13C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E3 J2B J104 J36 J2 J276 J162 J13D J159 J11B J110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E4 J15C J1C1 J158 J273 J16D J1A JAF JF J4C J17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E5 J97 JF J6E J2 J97 J0 J60 J1 J277 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E6 J144 J2B JFA J3D J2 J276 J15F J171 J15B J1A7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E7 J156 J1C2 J1A8 J1B1 J15E J191 J1C7 J1A6 J166 J1D8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E8 J15D J1B0 J277 J1 J13E J2B J105 J3D J2 J276</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2E9 J15F J1A JFD J2 J171 J1 J2D J2 J13A J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2EA J15B J11E J113 J156 J155 J13F J1A8 J129 J118 J15E</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2EB J167 J1C7 J16B J166 J19E J15D J180 J277 J1 J1AA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2EC J2B J1A9 J44 J2 J81 J4F J0 J40 J34 J71</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2ED J2 JF8 J4F J0 JC3 J1 J256 J11A J1 J136</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2EE J2B J193 J44 J2 J81 J32 J0 J204 JC0 J26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2EF J102 JD2 J25C J22F J25D JDA J1A J161 J95 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F0 JA4 J26C J1 J2D J2 J38 J0 J131 J55 J126</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F1 J16A J203 J1 J11A J1 J13B J2B J183 J42 J81</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F2 J23 J2 J2C J65 J0 J2 J5 JA J81 J54</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F3 J0 J35 JD2 J25C J234 JC5 J1E4 JE4 J25D J54</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F4 J0 J12D J33 J1A J78 J2 JEF J276 J162 J1A5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F5 J159 J14B J134 J15C J1D5 J18B J1A J5E JF J23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F6 J2 J273 J19F J1A JC6 JF J4C J17 JB9 JF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F7 J6E J2 JB9 J0 J60 J1 J1 J277 J126 J14F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F8 J1FE J1 J2D J2 J200 J1 J11A J1 J122 J2B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2F9 J1A2 J42 J81 J23 J2 J2C J65 J0 J2 J5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2FA JA J81 J54 J0 J35 JD2 J25C J235 JC5 J1E4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2FB JE4 J25D J54 J0 J146 J33 J1A J78 J2 J1A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2FC J5E J13 J23 J2 J21F J1 J2D J2 JEF J38</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2FD J0 J172 J74 J126 J16A J205 J1 J1 J2D J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2FE J200 J1 J11A J1 J1B4 J2B J1B8 J44 J2 J1A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J2FF J4D J2 J82 J4F J0 J40 J24 JBF J0 JB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J300 J24 JA0 J0 J16C JA0 J0 JBB J6 J15 J9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J301 J115 J7 J14 J34 J71 J2 J24 J3E J0 JB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J302 JD2 J25C J231 J25D J279 J34 J71 J2 JF2 J4F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J303 J0 JC3 J1A J6F J13 J115 J2 J46 J1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J304 J1A J71 J2 J26B J24 J68 J120 J49 J77 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J305 J2F J1D J46 J2F JE J69 J1 J1 J1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J306 J256 J11A J1 J141 J2B J194 J44 J2 J82 J29</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J307 J0 J202 JBE J26 J101 JD2 J25C J22C J25D JDD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J308 J1A J1B3 J9B J2 JA6 J274 J1 J2D J2 J38</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J309 J0 J139 J50 J126 J163 J20A J1 J11A J1 J127</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J30A J2B J17F J44 J2 J2C J65 J0 J2 J5 JA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J30B J82 J54 J0 J35 JD2 J25C J22E JC5 J1EB JE4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J30C J25D J54 J0 J18C J33 J1A J78 J2 JF3 JF9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J30D J126 J14D J20C J1 J2D J2 J209 J1 J11A J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J30E J124 J2B J1A4 J44 J2 J2C J65 J0 J2 J5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J30F JA J82 J54 J0 J35 JD2 J25C J233 JC5 J1EB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J310 JE4 J25D J54 J0 J192 J33 J1A J78 J2 JF3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J311 J38 J0 J178 J74 J126 J163 J208 J1 J2D J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J312 J209 J1 J11A J1 J1DA J2B J1C5 J44 J2 J2C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J313 J65 J0 J2 J5 JA J82 J54 J0 J35 JD2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J314 J25C J244 JC5 J1EB JE4 J25D J54 J0 J18C J33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J315 J1A J78 J2 JF3 J1 J2D J2 J209 J1 J11A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J316 J1 J1DC J2B J1E2 J44 J2 J2C J7C J0 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J317 J5 JA J82 J54 J0 J35 JD2 J25C J243 JC5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J318 J1E7 JDB JD7 J25D J54 J0 J1AE J47 J1A J78</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J319 J2 J1B J2 JF3 J54 J0 J20B J47 J1 J34</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J31A J89 J1 J2D J2 J209 J1 J11A J1 J1D1 J2B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J31B J1FB J44 J2 J2C JAD J0 J2 J5 JA J82</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J31C J54 J0 J35 JD2 J25C J242 JC5 J1E8 JF0 JE3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J31D J25D J54 J0 J1CC J73 J1A J78 J2 J1B J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J31E JF3 J54 J0 J218 J73 J1 J34 J89 J1 J2D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J31F J2 J209 J1 J11A J1 J1F0 J2B J1EA J44 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J320 J2C J9E J0 J2 J5 JA J82 J54 J0 J35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J321 JD2 J25C J257 JC5 J206 JE5 JDC J25D J54 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J322 J1C4 J64 J1A J78 J2 J1B J2 JF3 J54 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J323 J211 J64 J1 J34 J89 J1 J2D J2 J209 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J324 J11A J1 J142 JAA J132 J42 J3F J6D J3F J6B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J325 J2 JAA J54 J0 J1C0 J7E J1A J8C J2 J54</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J326 J0 J221 JD6 J12 J112 J153 J7E J38 J0 J169</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J327 J74 J1 J1A JCF J8 JF5 J2 J24 J51 J27</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J328 J4B J0 JB J43 J8 JF1 J79 J2 J1A J1DD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J329 J13 J11 J2 J1C6 J7F JE2 J181 J5A J61 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J32A J1 J1 J5A J35 J1 J12A JAA J174 J42 J3F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J32B J6D J3F J6B J2 JAA J54 J0 J1C0 J7E J1A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J32C J78 J2 J24 J51 J27 J4B J0 JB J43 J8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J32D JF1 J79 J2 J1A J1DB J6B J13 J11 J2 J1C8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J32E J12 J3B JE0 J1A JCF J13 J11 J2 J38 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J32F J1A3 J74 J1 J181 J5A J61 J1 J1 J1 J5A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J330 J35 J1 J9A J2B J184 J83 JB1 JAE J81 J23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J331 J2 J2C J65 J0 J2 J5 JA J82 J54 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J332 J35 JD2 J25C J201 JC5 J1EB JE4 J25D J54 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J333 J1C9 J33 J1A J78 J2 JF3 J1A JD0 J3 J11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J334 J2 J1A J12B J66 JBC J2 J126 JDF J1A0 J1CB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J335 J1 J2D J2 J278 J1 J1 J2D J2 J1CA J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J336 J1 J2D J2 J209 J1 J11A J1 J9D J2B J185</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J337 J83 JB1 JAE J81 J23 J2 J2C J65 J0 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J338 J5 JA J82 J54 J0 J35 JD2 J25C J1FF JC5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J339 J1EB JE4 J25D J54 J0 J1C9 J33 J1A J78 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J33A JF3 J1A J177 J66 JBC J2 J126 JE1 J1A0 J1CB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J33B J1 J2D J2 J22D J1 J1 J2D J2 J209 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J33C J11A J1 JDE J2B J182 J83 JAA JAE J81 J23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J33D J2 JAA J54 J0 J35 JD2 J25C J232 JC5 J54</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J33E J0 J1FA J75 J267 J1A J78 J2 J24 J51 J27</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J33F J4B J0 JB J43 J8 JF1 J79 J2 J3F J5F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J340 J0 J151 J82 J29 J0 J1C9 J7F J1A J57 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J341 J268 J1 J1 J1 J25D J11A J1 J133 J2B J19C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J342 J42 J81 J23 J2 JD2 J25C J230 J25D J276 J162</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J343 J148 J159 J176 J15C J190 J140 J277 J126 J14F J207</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J344 J11A J1 J145 J2B J1AD J42 J81 J23 J2 J24</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J345 J68 J34 J21 J2 JD2 J26F J23F JC5 J254 J24C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J346 J246 J24E J226 JC5 J26E JC5 J120 J49 J77 J2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J347 J2F J1D J189 J46 J2F J1C J14C J46 J2F J1E</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J348 J154 J30 J46 J2F JC J12C J30 J46 J2F JE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J349 J69 J1 J1 J1 J125 J2B J199 J44 J2 J24</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J34A J68 J34 J21 J2 JD2 J26F J23E JC5 J247 J25A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J34B J259 J25B J264 J226 JC5 J26E JC5 J120 J49 J77</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J34C J2 J2F J1D J17C J46 J2F J1C J19D J46 J2F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J34D J1E J1BE J46 J2F JC J1DE J46 J2F JD J1CD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J34E J46 J2F JE J69 J1 J1 J1 J123 J2B J1B5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J34F J44 J2 J24 J68 J34 J21 J2 JD2 J26F J240</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J350 JC5 J255 J253 J248 J226 JC5 J26E JC5 J120 J49</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J351 J77 J2 J2F J1D J14A J46 J2F J1C J15A J46</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J352 J2F J1E J149 J46 J2F JE J69 J1 J1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J353 JE9 J81 J114 J42 J3F J22 J3F J84 J2 J81</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J354 J54 J0 J12D J33 J1A J78 J2 J1A J17E J84</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J355 J13 J11 J2 J5A J61 J1 J1 J5A J35 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J356 J1D7 J2B J18E J7D J81 J28 JA2 J83 JB1 JB0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J357 J2 J34 J21 J2 J24 J68 JD2 J26F J265 JC5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J358 J24F J249 J228 J227 J24B J245 JC5 J27B J26E JC5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J359 J120 J49 J77 J2 J2F J1D J1BF J46 J2F J1C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J35A J1BD J30 J46 J2F J1E J19A JAE J30 J46 J2F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J35B JC J1A1 JAE J30 J46 J2F JD J19B JB7 J30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J35C J46 J2F JE J69 J1 J1 J1 J1B7 J2B J1B2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J35D J7D J81 J28 JA2 J80 J2 J34 J21 J2 J24</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J35E J68 JD2 J26F J265 JC5 J24F J24D J24A J245 JC5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J35F J27A J26E JC5 J120 J49 J77 J2 J2F J1D J1BF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J360 J46 J2F J1C J18D J30 J46 J2F J1E J1B6 J46</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J361 J2F JE J69 J1 J1 J1 J236 J2B J117 J44</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J362 J2 J81 J32 J0 J204 JC0 J26 J102 JD2 J26F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J363 J265 J275 JC5 J1E3 J13D J1E6 J11B J110 J1E9 J1BB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J364 J97 J0 J7A J26E J38 J0 J131 J55 J16A J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J365 JEA J81 J109 J44 J2 J2C J65 J0 J2 J5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J366 JA J2C JC4 J0 J2 J5 JA J81 J32 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J367 J35 JD2 J26F J272 JC5 JC5 J1E3 JE4 J1E9 J150</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J368 J103 J26E J5A JE6 J22 J91 J1 JE7 J2B JFC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J369 J7D JA2 J83 JB1 JB0 J2 J81 J19 J0 J35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J36A J1B J2 J19 J0 J11C J1A J37 J2 J266 J11A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J36B J1 J1 J34 J59 J49 JA1 J2 J2F J62 J18A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J36C J28 J83 JB3 J46 J2F J70 J18F J28 JA3 J46</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J36D J1 J1 J24 J4E J2 J1F7 J81 J6C J0 J108</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J36E J1FD J82 J7B J0 J10B J1F8 JAA J90 J0 J121</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J36F J222 J1A JAC J2 J12F J1 JE7 JFB J9F JCD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J370 J12E J1AB J128 J1AF J137 J1E1 J5A JB J1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J371 J27C J27D J27E J27F J280 J281 J282 J283 J284 J285</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J372 J286 J287 J288 J289 J28A J28B J28C J28D J28E J28F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J373 J290 J291 J292 J293 J294 J295 J296 J297 J298 J299</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J374 J29A J29B J29C J29D J29E J29F J2A0 J2A1 J2A2 J2A3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J375 J2A4 J2A5 J2A6 J2A7 J2A8 J2A9 J2AA J2AB J2AC J2AD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J376 J2AE J2AF J2B0 J2B1 J2B2 J2B3 J2B4 J2B5 J2B6 J2B7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J377 J2B8 J2B9 J2BA J2BB J2BC J2BD J2BE J2BF J2C0 J2C1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J378 J2C2 J2C3 J2C4 J2C5 J2C6 J2C7 J2C8 J2C9 J2CA J2CB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J379 J2CC J2CD J2CE J2CF J2D0 J2D1 J2D2 J2D3 J2D4 J2D5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J37A J2D6 J2D7 J2D8 J2D9 J2DA J2DB J2DC J2DD J2DE J2DF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J37B J2E0 J2E1 J2E2 J2E3 J2E4 J2E5 J2E6 J2E7 J2E8 J2E9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J37C J2EA J2EB J2EC J2ED J2EE J2EF J2F0 J2F1 J2F2 J2F3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J37D J2F4 J2F5 J2F6 J2F7 J2F8 J2F9 J2FA J2FB J2FC J2FD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J37E J2FE J2FF J300 J301 J302 J303 J304 J305 J306 J307</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J37F J308 J309 J30A J30B J30C J30D J30E J30F J310 J311</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J380 J312 J313 J314 J315 J316 J317 J318 J319 J31A J31B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J381 J31C J31D J31E J31F J320 J321 J322 J323 J324 J325</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J382 J326 J327 J328 J329 J32A J32B J32C J32D J32E J32F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J383 J330 J331 J332 J333 J334 J335 J336 J337 J338 J339</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J384 J33A J33B J33C J33D J33E J33F J340 J341 J342 J343</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J385 J344 J345 J346 J347 J348 J349 J34A J34B J34C J34D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J386 J34E J34F J350 J351 J352 J353 J354 J355 J356 J357</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J387 J358 J359 J35A J35B J35C J35D J35E J35F J360 J361</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J388 J362 J363 J364 J365 J366 J367 J368 J369 J36A J36B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J389 J36C J36D J36E J36F J370 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J38A J371 J372 J373 J374 J375 J376 J377 J378 J379 J37A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J38B J37B J37C J37D J37E J37F J380 J381 J382 J383 J384</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J38C J385 J386 J387 J388 J389 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J38D J38A J38B J38C </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J38E(__FOX__) __FOX__</span></span><br><span class="line">J38E(J38D)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h3><p><img src="/c-cpp-disorder/1.png" alt="CodeDisorder"></p>
<blockquote>
<ol>
<li>选择 <code>C/C++</code> 源文件进行混淆</li>
<li>为混淆后的代码添加的声明信息</li>
<li>勾选 <code>行分模式</code> 将以 <code>行</code> 为颗粒拆分代码，否则以 <code>词</code> 为颗粒拆分代码</li>
<li>混淆后的代码是否保留注释</li>
<li>代码的部分混淆，<code>0</code> 表示所有代码都混淆，<code>50</code> 表示50行之前的代码保持原状，50行之后的代码进行混淆</li>
<li>设置混淆后的代码的使用期限，<code>0</code> 表示混淆后的代码无使用期限，<code>1440</code> 表示混淆后的代码自混淆时间起有1440分钟（24小时）的使用期限</li>
<li>查看每次操作的混淆代码和原始代码的存档</li>
<li>若不想指定源文件进行混淆，可直接粘贴代码快速混淆</li>
</ol>
</blockquote>
<hr>
<h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p>下载链接：<a href="./CodeDisorder.zip"><em><strong>CodeDisorder</strong></em></a></p>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>代码混淆器</tag>
      </tags>
  </entry>
</search>
